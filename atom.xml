<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Tsinghua's Blog]]></title>
  <subtitle><![CDATA[梦想不是浮躁，而是沉淀和积累。]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yangqinghua.com//"/>
  <updated>2016-02-04T09:13:24.000Z</updated>
  <id>http://yangqinghua.com//</id>
  
  <author>
    <name><![CDATA[yangqinghua]]></name>
    <email><![CDATA[qhyang.bit@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[猴年猴赛雷]]></title>
    <link href="http://yangqinghua.com/2016/01/30/%E7%8C%B4%E5%B9%B4%E7%8C%B4%E8%B5%9B%E9%9B%B7/"/>
    <id>http://yangqinghua.com/2016/01/30/猴年猴赛雷/</id>
    <published>2016-01-30T01:20:05.000Z</published>
    <updated>2016-02-04T09:13:24.000Z</updated>
    <content type="html"><![CDATA[<h2 id="猴年春晚吉祥物">猴年春晚吉祥物</h2><p>2016年1月21日央视春晚官微发布了猴年春晚吉祥物康康的形象，引起了广泛关注。有人说是拿来辟邪的吗?也有说红黄绿颜色三种颜色是红绿灯吗？<br><a id="more"></a><br><img src="/img/deng.png" alt="红绿灯"><br>最初我也是加入到吐槽大军里去的，特别是3D建模，真的是丑哭了！但是，今天看了最新的一期的《开讲啦》，演讲嘉宾是韩美林，吉祥物康康的设计者，开始看的初衷也是想弄明白，怎么会确定这么丑的东西呢。当我看完这一期节目的时候，我发现我错了，对韩美林这位老艺术家真是肃然起敬，真正的设计原稿：<img src="/img/yuanxing.png" alt="yuanxing"> 水墨画真的还是很萌的，只是3D版实在是太糟糕了。这是，韩老师的微博截图：<img src="/img/jietu.png" alt="jietu">并没有参与3D设计方案。我不懂设计，但看了下韩美林的微博，招致诸多批评，甚至部分网民对一位80岁高龄的老人最起码尊重都没了。真想引用节目里韩美林的一句话，“文化必须打底，没有文化打底，什么行动都应该考虑考虑！”<br>水墨画才是中国的形象，我喜欢韩美林设计的康康。</p>
<h3 id="韩美林精心创造猴头立体造型">韩美林精心创造猴头立体造型</h3><p><img src="/img/nisu.png" alt="zaoxing"></p>
<h3 id="韩美林反复设计修改">韩美林反复设计修改</h3><p><img src="/img/xiugai.png" alt="xiugai"></p>
<h3 id="韩美林部分设计手稿">韩美林部分设计手稿</h3><p><img src="/img/yanggao1.png" alt="yanggao"><br><img src="/img/yanggao2.png" alt="yanggao"><br><img src="/img/yanggao3.png" alt="yanggao"></p>
<p>新年快乐猴赛雷！！</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="猴年春晚吉祥物">猴年春晚吉祥物</h2><p>2016年1月21日央视春晚官微发布了猴年春晚吉祥物康康的形象，引起了广泛关注。有人说是拿来辟邪的吗?也有说红黄绿颜色三种颜色是红绿灯吗？<br>]]>
    
    </summary>
    
      <category term="随笔生活" scheme="http://yangqinghua.com/categories/%E9%9A%8F%E7%AC%94%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015年终总结]]></title>
    <link href="http://yangqinghua.com/2016/01/18/2015%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>http://yangqinghua.com/2016/01/18/2015年终总结/</id>
    <published>2016-01-18T07:49:05.000Z</published>
    <updated>2016-02-04T09:32:24.000Z</updated>
    <content type="html"><![CDATA[<p>当给文档写日期时，才意识到已经踏入2016年了。结束了第一学期最后一场考试，忙完了各种乱七八糟的事情，才算是静下心来！回想2015，这一年对于我来说是变化最大的一年，来到了一座新的城市，结识很多新的朋友。一直想写一篇这一年的总结，却不知从何说起。就想到什么写什么吧！<br><a id="more"></a></p>
<h2 id="这一年发生了什么">这一年发生了什么</h2><p>上半年结束了自己的本科四年生活，一个个小伙伴都各奔前程，还是挺伤感的。班里一起吃散伙饭的时候，大家都喝了很多，也说了很多，吃完这顿饭，可能有些同学就再也见不到了。<br>来到了北理工，说一下研究生的课程，与本科相较课程名字前面多了“高级”二字，内容感觉还是换汤不换药。讲收获的话，当初选课的时候选了两门有大作业了的课，还是明智的，真正动手去做，对实践能力才有一些提高。来读研，不能说失望吧，但对很多东西的看法有很多改变。用一句话安慰一下自己：师傅领进门,修行在个人。<br>总结一起来一句话：2015年对于我来说是很有意义的一年。</p>
<h2 id="新一年的计划">新一年的计划</h2><p>2016年会是非常繁忙又至关重要的一年。希望自己能够合理的管理和分配时间，学习更多的东西，多开阔一下自己的眼界。一月份上旬，几乎每天忙得晕头转向。“有时候会因为走的太快，忘了一开始的方向”，这是提醒自己，不要着急，梦想不是浮躁，而是沉淀和积累。还是列一个shedule吧。</p>
<ul>
<li>学习面试常用算法。亲身经历表明，高大上的公司也都会拿这个当门槛。最重要的一本书就是《编程之美》，决定先把它看完。</li>
<li>一定出去见识见识外面的世界，但是出去不是目的，一定要有有收获，最好能为以后selection有帮助。</li>
<li>今年的新年礼物，就是kindle，还是得多读书，不一定非得是技术方面的。</li>
<li>坚持每天学习英语（扇贝打卡），提高自己的英文文献的阅读能力，不能一看到英文文档就打怵。<br>当然还有最最要的一点，就是坚持锻炼。<br>最后，今年本命年，一定会有好运！   </li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>当给文档写日期时，才意识到已经踏入2016年了。结束了第一学期最后一场考试，忙完了各种乱七八糟的事情，才算是静下心来！回想2015，这一年对于我来说是变化最大的一年，来到了一座新的城市，结识很多新的朋友。一直想写一篇这一年的总结，却不知从何说起。就想到什么写什么吧！<br>]]>
    
    </summary>
    
      <category term="随笔生活" scheme="http://yangqinghua.com/categories/%E9%9A%8F%E7%AC%94%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[排序算法总结]]></title>
    <link href="http://yangqinghua.com/2015/12/20/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://yangqinghua.com/2015/12/20/排序算法总结/</id>
    <published>2015-12-20T04:07:05.000Z</published>
    <updated>2016-02-04T08:29:48.000Z</updated>
    <content type="html"><![CDATA[<p>排序算法在面试中遇到的可能性非常大，为了基础，把各种排序算法整理下来，包括插入排序，希尔排序，冒泡排序，快速排序，选择排序，堆排序，归并排序。</p>
<h2 id="直接插入排序">直接插入排序</h2><h3 id="基本思想">基本思想</h3><p>每步将一个待排序的纪录，按其关键码值的大小插入前面已经排序的文件中适当位置上，直到全部插入完为止。</p>
<h3 id="步骤">步骤</h3><p>(1)从第一个元素开始，该元素可以认为已经被排序<br>(2)取出下一个元素，在已经排序的元素序列中从后向前扫描<br>(3)如果被扫描的元素（已排序）大于新元素，将该元素后移一位<br>(4)重复步骤3，直到找到已排序的元素小于或者等于新元素的位置<br>(5)将新元素插入到该位置后<br>(6)重复步骤2~5<br><a id="more"></a></p>
<h3 id="源码">源码</h3><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> void DirectInsertSort(int a[],int n)</span><br><span class="line"><span class="comment">&#123;   int i,j;</span><br><span class="line">	for(i=2;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		a[0]=a[i];</span><br><span class="line">		for(j=i-1;a[j]&gt;a[0];j--)</span><br><span class="line">	            a[j+1]=a[j];</span><br><span class="line">		a[j+1]=a[0];</span><br><span class="line">	&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="折半插入排序">折半插入排序</h2><h3 id="基本思想-1">基本思想</h3><p>每步将一个待排序的纪录，按其关键码值的大小插入前面已经排序的文件中适当位置上，直到全部插入完为止。</p>
<h3 id="步骤-1">步骤</h3><p>(1)从第一个元素开始，该元素可以认为已经被排序<br>(2)取出下一个元素，在已经排序的元素序列中折半查找，将新元素插入a[high+1]</p>
<h3 id="源码-1">源码</h3><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public static void ReduceInsertSort(int <span class="literal">a</span>[],int n)</span><br><span class="line">&#123;</span><br><span class="line">	int i,j,low,high,middle<span class="comment">;</span></span><br><span class="line">	for(i=<span class="number">2</span><span class="comment">;i&lt;=n;i++)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="literal">a</span>[<span class="number">0</span>]=<span class="literal">a</span>[i]<span class="comment">;</span></span><br><span class="line">		low=<span class="number">1</span><span class="comment">;</span></span><br><span class="line">		high=i-<span class="number">1</span><span class="comment">;</span></span><br><span class="line">		<span class="keyword">while</span>(low&lt;=high)</span><br><span class="line">		&#123;</span><br><span class="line">			middle=(low+high)/<span class="number">2</span><span class="comment">;</span></span><br><span class="line">			<span class="keyword">if</span>(<span class="literal">a</span>[middle]&gt;<span class="literal">a</span>[<span class="number">0</span>])</span><br><span class="line">				high=low-<span class="number">1</span><span class="comment">;</span></span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				low=high+<span class="number">1</span><span class="comment">;</span></span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		for(j=i-<span class="number">1</span><span class="comment">;j&gt;=high+1;j--)</span></span><br><span class="line">			<span class="literal">a</span>[j+<span class="number">1</span>]=<span class="literal">a</span>[j]<span class="comment">;</span></span><br><span class="line">		<span class="literal">a</span>[high+<span class="number">1</span>]=<span class="literal">a</span>[<span class="number">0</span>]<span class="comment">;</span></span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="希尔排序">希尔排序</h2><h3 id="基本思想-2">基本思想</h3><p>先取一个小于n的整数step作为第一个增量，把文件的全部记录分组。所有距离为step的倍数的记录放在同一个组中。先在各组内进行直接插入排序；然后，取第二个增量step2&lt;step1重复上述的分组和排序，直至所取的增量step=1，即所有记录放在同一组中进行直接插入排序为止。</p>
<h3 id="源码-2">源码</h3><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public static <span class="keyword">void</span> ShellSort(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">int</span> j;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> <span class="built_in">step</span>=n/<span class="number">2</span>;<span class="built_in">step</span>&gt;=<span class="number">1</span>;<span class="built_in">step</span>=<span class="built_in">step</span>/<span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="built_in">step</span>+<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[i]&lt;a[i-<span class="built_in">step</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				a[<span class="number">0</span>]=a[i];</span><br><span class="line">				<span class="keyword">for</span>(j=i-<span class="built_in">step</span>;j&gt;<span class="number">0</span>&amp;&amp;a[<span class="number">0</span>]&lt;a[j];j=j-<span class="built_in">step</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					a[j+<span class="built_in">step</span>]=a[j];</span><br><span class="line">				&#125;</span><br><span class="line">				a[j+<span class="built_in">step</span>]=a[<span class="number">0</span>];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="冒泡排序">冒泡排序</h2><h3 id="基本思想-3">基本思想</h3><p>冒泡排序的原理非常简单，它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。</p>
<h3 id="步骤-2">步骤</h3><p>(1)比较相邻的元素。如果第一个比第二个大，就交换他们两个。<br>(2)对第0个到第n-1个数据做同样的工作。这时，最大的数就“浮”到了数组最后的位置上。<br>(3)针对所有的元素重复以上的步骤，除了最后一个。<br>(4)持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p>
<h3 id="源码-3">源码</h3><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> void BubbleSort(int a[],int n)</span><br><span class="line"><span class="comment">&#123;</span><br><span class="line">	int i,j,temp;</span><br><span class="line">	boolean flag;</span><br><span class="line">	for(i=1;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		flag=false;</span><br><span class="line">		for(j=i+1;j&lt;=n;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			if(a[i]&gt;a[j])</span><br><span class="line">			&#123;   </span><br><span class="line">				temp=a[i];</span><br><span class="line">				a[i]=a[j];</span><br><span class="line">				a[j]=temp;</span><br><span class="line">				flag=true;</span><br><span class="line">			&#125;</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(flag==<span class="keyword">false</span>)</span><br><span class="line">		<span class="comment">&#123;</span><br><span class="line">			break;</span><br><span class="line">		&#125;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="快速排序">快速排序</h2><h3 id="基本思想-4">基本思想</h3><p>快速排序通常明显比同为Ο(n log n)的其他算法更快，因此常被采用，而且快排采用了分治法的思想，所以在很多笔试面试中能经常看到快排的影子。可见掌握快排的重要性。</p>
<h3 id="步骤-3">步骤</h3><p>(1)从数列中挑出一个元素作为基准数。<br>(2)分区过程，将比基准数大的放到右边，小于或等于它的数都放到左边。<br>(3)再对左右区间递归执行第二步，直至各区间只有一个数。</p>
<h3 id="源码-4">源码</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(low&lt;high)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> location=Partition(a,low,high);</span><br><span class="line">		QuickSort(a,low,location-<span class="number">1</span>);</span><br><span class="line">		QuickSort(a,location+<span class="number">1</span>,high);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//快速排序 </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">int</span> <span class="title">Partition</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> pivot=a[low];</span><br><span class="line">	<span class="keyword">while</span>(low&lt;high)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span>(low&lt;high&amp;&amp;a[high]&gt;=pivot)</span><br><span class="line">			high--;</span><br><span class="line">		a[low]=a[high];</span><br><span class="line">		<span class="keyword">while</span>(low&lt;high&amp;&amp;a[low]&lt;=pivot)</span><br><span class="line">			low++;</span><br><span class="line">		a[high]=a[low];</span><br><span class="line">	&#125;</span><br><span class="line">	a[low]=pivot;</span><br><span class="line">	<span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="简单选择排序">简单选择排序</h2><h3 id="基本思想-5">基本思想</h3><p>每一次从待排序的数据元素中选出最小的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完</p>
<h3 id="步骤-4">步骤</h3><p>(1)在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。<br>(2)再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。<br>(3)以此类推，直到所有元素均排序完毕。</p>
<h3 id="源码-5">源码</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> SelectSort(<span class="built_in">int</span> a[],<span class="built_in">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">int</span> temp;</span><br><span class="line">	<span class="built_in">int</span> i,j;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">int</span> <span class="built_in">min</span>=i;</span><br><span class="line">		<span class="keyword">for</span>( j=i+<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[<span class="built_in">min</span>]&gt;a[j])</span><br><span class="line">				<span class="built_in">min</span>=j;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">min</span>!=i)</span><br><span class="line">		&#123;</span><br><span class="line">			temp=a[i];</span><br><span class="line">			a[i]=a[<span class="built_in">min</span>];</span><br><span class="line">			a[<span class="built_in">min</span>]=temp;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="堆排序">堆排序</h2><h3 id="基本思想-6">基本思想</h3><p>堆排序在 top K 问题中使用比较频繁。堆排序是采用二叉堆的数据结构来实现的，虽然实质上还是一维数组。二叉堆是一个近似完全二叉树 。</p>
<h3 id="步骤-5">步骤</h3><p>(1)构造最大堆（Build_Max_Heap）：若数组下标范围为0~n，考虑到单独一个元素是大根堆，则从下标n/2开始的元素均为大根堆。于是只要从n/2-1开始，向前依次构造大根堆，这样就能保证，构造到某个节点时，它的左右子树都已经是大根堆。</p>
<p>(2)堆排序（HeapSort）：由于堆是用数组模拟的。得到一个大根堆后，数组内部并不是有序的。因此需要将堆化数组有序化。思想是移除根节点，并做最大堆调整的递归运算。第一次将heap[0]与heap[n-1]交换，再对heap[0…n-2]做最大堆调整。第二次将heap[0]与heap[n-2]交换，再对heap[0…n-3]做最大堆调整。重复该操作直至heap[0]和heap[1]交换。由于每次都是将最大的数并入到后面的有序区间，故操作完后整个数组就是有序的了。</p>
<p>(3)最大堆调整（Max_Heapify）：该方法是提供给上述两个过程调用的。目的是将堆的末端子节点作调整，使得子节点永远小于父节点 。</p>
<h3 id="源码-6">源码</h3><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//堆排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> void HeapSort(int a[],int n)</span><br><span class="line"><span class="comment">&#123;</span><br><span class="line">	BuildMaxHeap(a,n);</span><br><span class="line">	int temp;</span><br><span class="line">	for(int i=n;i&gt;1;i--)</span><br><span class="line">	   &#123;</span><br><span class="line">			temp=a[1];</span><br><span class="line">		    a[1]=a[i];</span><br><span class="line">		    a[i]=temp;</span><br><span class="line">			AdjustDown(a,1,i-1);</span><br><span class="line">		&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//建堆</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> void BuildMaxHeap(int a[],int n)</span><br><span class="line"><span class="comment">&#123;</span><br><span class="line">	for(int i=n/2;i&gt;=1;i--)</span><br><span class="line">	&#123;</span><br><span class="line">		AdjustDown(a,i,n);</span><br><span class="line">	&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调整</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> void AdjustDown(int a[],int k,int n)</span><br><span class="line"><span class="comment">&#123;</span><br><span class="line">	a[0]=a[k];</span><br><span class="line">	for(int i=2*k;i&lt;=n;i=i*2)</span><br><span class="line">	&#123;</span><br><span class="line">		if(i&lt;n&amp;&amp;a[i]&lt;a[i+1])</span><br><span class="line">			i++;</span><br><span class="line">		if(a[0]&gt;=a[i])</span><br><span class="line">			break;</span><br><span class="line">		else</span><br><span class="line">			&#123;</span><br><span class="line">				 a[k]=a[i];</span><br><span class="line">				 k=i;</span><br><span class="line">			&#125;</span></span><br><span class="line">	&#125;</span><br><span class="line">	a[k]=a[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="归并排序">归并排序</h2><h3 id="基本思想-7">基本思想</h3><p>归并排序是采用分治法的一个非常典型的应用。归并排序的思想就是先递归分解数组，再合并数组。</p>
<h3 id="源码-7">源码</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(low&lt;high)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">		MergeSort(a,low,mid);</span><br><span class="line">		MergeSort(a,mid+<span class="number">1</span>,high);</span><br><span class="line">		Merge(a,low,mid,high);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//合并</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> low,<span class="keyword">int</span> mid,<span class="keyword">int</span> high)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> b[]=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>];</span><br><span class="line">	<span class="keyword">int</span> i,j,k;</span><br><span class="line">	<span class="keyword">for</span>(k=low;k&lt;=high;k++)</span><br><span class="line">	&#123;</span><br><span class="line">		b[k]=a[k];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=low,j=mid+<span class="number">1</span>,k=i;i&lt;=mid&amp;&amp;j&lt;=high;k++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(b[i]&lt;=b[j])</span><br><span class="line">		   a[k]=b[i++];</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			a[k]=b[j++];</span><br><span class="line">	&#125;</span><br><span class="line">		<span class="keyword">while</span>(i&lt;=mid)</span><br><span class="line">			a[k++]=b[i++];</span><br><span class="line">		<span class="keyword">while</span>(j&lt;=high)</span><br><span class="line">			a[k++]=b[j++];</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结">总结</h2><p>下面为七种经典排序算法指标对比情况：<br><img src="/img/sort.jpg" alt="sort"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>排序算法在面试中遇到的可能性非常大，为了基础，把各种排序算法整理下来，包括插入排序，希尔排序，冒泡排序，快速排序，选择排序，堆排序，归并排序。</p>
<h2 id="直接插入排序">直接插入排序</h2><h3 id="基本思想">基本思想</h3><p>每步将一个待排序的纪录，按其关键码值的大小插入前面已经排序的文件中适当位置上，直到全部插入完为止。</p>
<h3 id="步骤">步骤</h3><p>(1)从第一个元素开始，该元素可以认为已经被排序<br>(2)取出下一个元素，在已经排序的元素序列中从后向前扫描<br>(3)如果被扫描的元素（已排序）大于新元素，将该元素后移一位<br>(4)重复步骤3，直到找到已排序的元素小于或者等于新元素的位置<br>(5)将新元素插入到该位置后<br>(6)重复步骤2~5<br>]]>
    
    </summary>
    
      <category term="java" scheme="http://yangqinghua.com/tags/java/"/>
    
      <category term="排序" scheme="http://yangqinghua.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="Algorithm" scheme="http://yangqinghua.com/categories/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[蒙特卡洛算法]]></title>
    <link href="http://yangqinghua.com/2015/10/10/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E7%AE%97%E6%B3%95/"/>
    <id>http://yangqinghua.com/2015/10/10/蒙特卡洛算法/</id>
    <published>2015-10-10T08:07:05.000Z</published>
    <updated>2015-10-10T08:49:24.000Z</updated>
    <content type="html"><![CDATA[<p>学习hadoop时，看见有一个自带的example，是计算PI值，于是深入研究一下。百度一下，计算PI的方法还真不少。但在hadoop examples代码中的注释写的是：是采用 Quasi-Monte Carlo 算法来估算PI的值。</p>
<h2 id="蒙特卡洛方法">蒙特卡洛方法</h2><p>蒙特卡罗方法又称统计模拟法、随机抽样技术，是一种随机模拟方法，以概率和统计理论方法为基础的一种计算方法，是使用随机数（或更常见的伪随机数）来解决很多计算问题的方法。将所求解的问题同一定的概率模型相联系，用电子计算机实现统计模拟或抽样，以获得问题的近似解。为象征性地表明这一方法的概率统计特征，故借用赌城蒙特卡罗命名。 提出： 蒙特卡罗方法于20世纪40年代美国在第二次世界大战中研制原子弹的“曼哈顿计划”计划的成员S.M.乌拉姆和J.冯·诺伊曼首先提出。数学家冯·诺伊曼用驰名世界的赌城—摩纳哥的Monte Carlo—来命名这种方法，为它蒙上了一层神秘色彩。在这之前，蒙特卡罗方法就已经存在。1777年，法国数学家布丰（Georges Louis Leclere de Buffon，1707—1788）提出用投针实验的方法求圆周率π。这被认为是蒙特卡罗方法的起源。<br><a id="more"></a></p>
<h3 id="1-基本思想">1.基本思想</h3><p>当所求解问题是某种随机事件出现的概率，或者是某个随机变量的期望值时，通过某种“实验”的方法，以这种事件出现的频率估计这一随机事件的概率，或者得到这个随机变量的某些数字特征，并将其作为问题的解。 工作过程 蒙特卡罗方法的解题过程可以归结为三个主要步骤：构造或描述概率过程；实现从已知概率分布抽样；建立各种估计量。 蒙特卡罗方法解题过程的三个主要步骤： （1）构造或描述概率过程 对于本身就具有随机性质的问题，如粒子输运问题，主要是正确描述和模拟这个概率过 程，对于本来不是随机性质的确定性问题，比如计算定积分，就必须事先构造一个人为的概率过程，它的某些参量正好是所要求问题的解。即要将不具有随机性质的问题转化为随机性质的问题。 （2）实现从已知概率分布抽样 构造了概率模型以后，由于各种概率模型都可以看作是由各种各样的概率分布构成的，因此产生已知概率分布的随机变量（或随机向量），就成为实现蒙特卡罗方法模拟实验的基本手段，这也是蒙特卡罗方法被称为随机抽样的原因。最简单、最基本、最重要的一个概率分布是（0，1）上的均匀分布（或称矩形分布）。随机数就是具有这种均匀分布的随机变量。随机数序列就是具有这种分布的总体的一个简单子样，也就是一个具有这种分布的相互独立的随机变数序列。产生随机数的问题，就是从这个分布的抽样问题。在计算机上，可以用物理方法产生随机数，但价格昂贵，不能重复，使用不便。另一种方法是用数学递推公式产生。这样产生的序列，与真正的随机数序列不同，所以称为伪随机数，或伪随机数序列。不过，经过多种统计检验表明，它与真正的随机数，或随机数序列具有相近的性质，因此可把它作为真正的随机数来使用。由已知分布随机抽样有各种方法，与从(0,1)上均匀分布抽样不同，这些方法都是借助于随机序列来实现的，也就是说，都是以产生随机数为前提的。由此可见，随机数是我们实现蒙特卡罗模拟的基本工具。 （3）建立各种估计量 一般说来，构造了概率模型并能从中抽样后，即实现模拟实验后，我们就要确定一个随机变量，作为所要求的问题的解，我们称它为无偏估计。建立各种估计量，相当于对模拟实验的结果进行考察和登记，从中得到问题的解。 数学应用： 通常蒙特·卡罗方法通过构造符合一定规则的随机数来解决数学上的各种问题。对于那些由于计算过于复杂而难以得到解析解或者根本没有解析解的问题，蒙特·卡罗方法是一种有效的求出数值解的方法。一般蒙特·卡罗方法在数学中最常见的应用就是蒙特·卡罗积分。</p>
<h2 id="利用模型计算圆周率">利用模型计算圆周率</h2><h3 id="1-原理">1.原理</h3><p>在数值积分法中，利用求单位圆的1/4的面积来求得Pi/4从而得到Pi。单位圆的1/4面积是一个扇形，它是边长为1单位正方形的一部分。只要能求出扇形面积S在正方形面积Figure2中占的比例K=S/Figure2就立即能得到S，从而得到Pi的值。怎样求出扇形面积在正方形面积中占的比例K呢？一个办法是在正方形中随机投入很多点，使所投的点落在正方形中每一个位置的机会相等看其中有多少个点落在扇形内。将落在扇形内的点数m与所投点的总数n的比m/n作为k的近似值。P落在扇形内的充要条件是x^2+y^2&lt;=1。</p>
<h3 id="2-截图">2.截图</h3><p><img src="/img/monte.jpg" alt="monte"></p>
<h2 id="估算pi">估算pi</h2><h3 id="1-运行hadoop估算PI的命令">1.运行hadoop估算PI的命令</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">hadoop</span> <span class="tag">jar</span> <span class="tag">hadoop-1</span><span class="class">.2</span><span class="class">.1-examples</span><span class="class">.jar</span> <span class="tag">pi</span> 10 100</span><br></pre></td></tr></table></figure>
<p>后面两个数字的含义是:第1个10指的是要运行10次map任务,第2个数字100指的是每个map任务，要投掷多少次。</p>
<h3 id="java代码">java代码</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package com.test;</span><br><span class="line"></span><br><span class="line">import java.util.Random;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MontePI</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</span><br><span class="line">                 System.<span class="keyword">out</span>.println(<span class="string">"Please input times: "</span>);</span><br><span class="line">                 Scanner sc=<span class="keyword">new</span> Scanner(System.<span class="keyword">in</span>);</span><br><span class="line">                caculatePI(sc.nextInt());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">caculatePI</span>(<span class="params"><span class="keyword">int</span> countInSquarel</span>) </span>&#123;</span><br><span class="line">				<span class="keyword">int</span> countInCircle = <span class="number">0</span>, i, resulttimes;</span><br><span class="line">				<span class="keyword">double</span> x, y;  <span class="comment">//坐标 </span></span><br><span class="line">				Random s = <span class="keyword">new</span> Random();</span><br><span class="line">				<span class="keyword">for</span> (resulttimes = <span class="number">0</span>; resulttimes &lt; <span class="number">10</span>; resulttimes++) &#123;    <span class="comment">//输出十次结果 </span></span><br><span class="line">							<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= countInSquarel; i++) &#123;</span><br><span class="line">										x = s.nextDouble();    <span class="comment">// 在0~1之间产生一个随机x坐标 </span></span><br><span class="line">										y = s.nextDouble(); <span class="comment">// 在0~1之间产生一个随机y坐标 </span></span><br><span class="line">										<span class="keyword">if</span> ((x*x+y*y)&lt;= <span class="number">1.0</span>)</span><br><span class="line">										countInCircle++; <span class="comment">//统计落入单位圆中的点数 </span></span><br><span class="line">							&#125;</span><br><span class="line">							System.<span class="keyword">out</span>.println(<span class="string">"The result of pai is "</span> + (<span class="keyword">double</span>) countInCircle / countInSquarel* <span class="number">4</span>); <span class="comment">//计算出π的值 </span></span><br><span class="line">							countInCircle = <span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>学习hadoop时，看见有一个自带的example，是计算PI值，于是深入研究一下。百度一下，计算PI的方法还真不少。但在hadoop examples代码中的注释写的是：是采用 Quasi-Monte Carlo 算法来估算PI的值。</p>
<h2 id="蒙特卡洛方法">蒙特卡洛方法</h2><p>蒙特卡罗方法又称统计模拟法、随机抽样技术，是一种随机模拟方法，以概率和统计理论方法为基础的一种计算方法，是使用随机数（或更常见的伪随机数）来解决很多计算问题的方法。将所求解的问题同一定的概率模型相联系，用电子计算机实现统计模拟或抽样，以获得问题的近似解。为象征性地表明这一方法的概率统计特征，故借用赌城蒙特卡罗命名。 提出： 蒙特卡罗方法于20世纪40年代美国在第二次世界大战中研制原子弹的“曼哈顿计划”计划的成员S.M.乌拉姆和J.冯·诺伊曼首先提出。数学家冯·诺伊曼用驰名世界的赌城—摩纳哥的Monte Carlo—来命名这种方法，为它蒙上了一层神秘色彩。在这之前，蒙特卡罗方法就已经存在。1777年，法国数学家布丰（Georges Louis Leclere de Buffon，1707—1788）提出用投针实验的方法求圆周率π。这被认为是蒙特卡罗方法的起源。<br>]]>
    
    </summary>
    
      <category term="java" scheme="http://yangqinghua.com/tags/java/"/>
    
      <category term="Algorithm" scheme="http://yangqinghua.com/categories/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[360笔试题]]></title>
    <link href="http://yangqinghua.com/2015/09/16/360%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    <id>http://yangqinghua.com/2015/09/16/360笔试题/</id>
    <published>2015-09-16T14:49:05.000Z</published>
    <updated>2015-09-17T01:36:32.000Z</updated>
    <content type="html"><![CDATA[<p>今天奇虎360在线笔试，把最后两道编程题总结下来，难度不是特别大，但有些麻烦。<br><a id="more"></a></p>
<h2 id="第一道">第一道</h2><p>判断学生成绩能否被录取，输入学生个数和学生成绩。</p>
<h3 id="代码">代码</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Test360</span> &#123;</span></span><br><span class="line">	public static void f(int a)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="constant">Scanner</span> scan1=new <span class="constant">Scanner</span>(<span class="constant">System</span>.<span class="keyword">in</span>);</span><br><span class="line">		 <span class="constant">String</span>  result[]= new <span class="constant">String</span> [a];</span><br><span class="line">		int i=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(a&gt;<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			int zhengzhi=scan1.nextInt();</span><br><span class="line">			int yingyu=scan1.nextInt();</span><br><span class="line">			int shuxue=scan1.nextInt();</span><br><span class="line">			int zhuanyeke=scan1.nextInt();</span><br><span class="line">			int sum=zhengzhi+yingyu+shuxue+zhuanyeke;</span><br><span class="line">			<span class="keyword">if</span>(zhengzhi&gt;=<span class="number">60</span>&amp;&amp;yingyu&gt;=<span class="number">60</span>&amp;&amp;shuxue&gt;=<span class="number">90</span>&amp;&amp;zhuanyeke&gt;=<span class="number">90</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(sum&gt;=<span class="number">350</span>)</span><br><span class="line">						&#123;</span><br><span class="line">					result[i++]=<span class="string">"gongfei"</span>;</span><br><span class="line">					</span><br><span class="line">						&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(sum&gt;=<span class="number">310</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					result[i++]=<span class="string">"zifei"</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				result[i++]=<span class="string">"fail"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			a--;</span><br><span class="line">		&#125;</span><br><span class="line">	 <span class="keyword">for</span>(int j=<span class="number">0</span>;j&lt;i;j++)</span><br><span class="line">	 &#123;</span><br><span class="line">		 <span class="constant">System</span>.out.println(result[j]);</span><br><span class="line">	 &#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public static void main(<span class="constant">String</span>[] args) &#123;</span><br><span class="line">		<span class="constant">Scanner</span> scan=new <span class="constant">Scanner</span>(<span class="constant">System</span>.<span class="keyword">in</span>) ;</span><br><span class="line">		int a=scan.nextInt();</span><br><span class="line">		f(a);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="输入格式及输出结果截图">输入格式及输出结果截图</h3><p><img src="/img/result1.png" alt="result1"></p>
<h2 id="第二道">第二道</h2><p>对正整数分解质因数，用特殊方式打印出来。</p>
<h3 id="代码（递归）">代码（递归）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test362</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//判断素数</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">issushu</span><span class="params">(<span class="keyword">int</span> shuzi)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (shuzi==<span class="number">2</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> max = (<span class="keyword">int</span>)Math.sqrt(shuzi);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=max;i++)</span><br><span class="line">		&#123;	</span><br><span class="line">			<span class="keyword">if</span> (shuzi%i==<span class="number">0</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;		</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;			</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//拆分因子，拼接成字符串</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String  <span class="title">getshuzu</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123; </span><br><span class="line">		String string = <span class="keyword">new</span> String(<span class="string">""</span>);</span><br><span class="line">		<span class="keyword">if</span> (issushu(value)) &#123;</span><br><span class="line">			<span class="keyword">return</span> string+<span class="string">"*"</span>+value;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=value/<span class="number">2</span>;i++)</span><br><span class="line">			&#123;	</span><br><span class="line">				<span class="keyword">if</span> (value%i==<span class="number">0</span>) &#123;</span><br><span class="line">					<span class="comment">//if(issushu(i))</span></span><br><span class="line">						string = string+<span class="string">"*"</span>+i;</span><br><span class="line">					<span class="comment">//else</span></span><br><span class="line">					<span class="comment">//	string = string+getshuzu(i);</span></span><br><span class="line">					<span class="keyword">if</span>(issushu(value/i))</span><br><span class="line">						string = string+<span class="string">"*"</span>+value/i;</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">						string = string+getshuzu(value/i);	</span><br><span class="line">					</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;							</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> string;</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br><span class="line">		</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//打印</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String[]  getstrings(String value) &#123;</span><br><span class="line">		String[] restring = <span class="keyword">new</span> String[<span class="number">5</span>];</span><br><span class="line">		restring[<span class="number">0</span>]=<span class="string">""</span>;</span><br><span class="line">		<span class="keyword">char</span>[] dangezifu = value.toCharArray();</span><br><span class="line">		String two = <span class="string">""</span>; String three = <span class="string">""</span>;</span><br><span class="line">		String four = <span class="string">""</span>; String five = <span class="string">""</span>;</span><br><span class="line">			</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">char</span> c: dangezifu)</span><br><span class="line">			<span class="keyword">switch</span> (c) &#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'1'</span>:</span><br><span class="line">				restring[<span class="number">0</span>] = restring[<span class="number">0</span>]+<span class="string">" | "</span>; two = two+<span class="string">" | "</span>; three = three+<span class="string">" | "</span>;</span><br><span class="line">				four = four+<span class="string">" | "</span>; five = five+<span class="string">" | "</span>; <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'2'</span>:</span><br><span class="line">				restring[<span class="number">0</span>] = restring[<span class="number">0</span>]+<span class="string">" - "</span>; two = two+<span class="string">"  |"</span>; three = three+<span class="string">" - "</span>;</span><br><span class="line">				four = four+<span class="string">"|  "</span>; five = five+<span class="string">" - "</span>; <span class="keyword">break</span>;				</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'3'</span>:</span><br><span class="line">				restring[<span class="number">0</span>] = restring[<span class="number">0</span>]+<span class="string">" - "</span>; two = two+<span class="string">"  |"</span>; three = three+<span class="string">" - "</span>;</span><br><span class="line">				four = four+<span class="string">"  |"</span>; five = five+<span class="string">" - "</span>; <span class="keyword">break</span>;								</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'4'</span>:</span><br><span class="line">				restring[<span class="number">0</span>] = restring[<span class="number">0</span>]+<span class="string">"| |"</span>; two = two+<span class="string">"| |"</span>; three = three+<span class="string">" - "</span>;</span><br><span class="line">				four = four+<span class="string">"  |"</span>; five = five+<span class="string">"  |"</span>; <span class="keyword">break</span>;								</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'5'</span>:</span><br><span class="line">				restring[<span class="number">0</span>] = restring[<span class="number">0</span>]+<span class="string">" - "</span>; two = two+<span class="string">"|  "</span>; three = three+<span class="string">" - "</span>;</span><br><span class="line">				four = four+<span class="string">"  |"</span>; five = five+<span class="string">" - "</span>; <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'6'</span>:</span><br><span class="line">				restring[<span class="number">0</span>] = restring[<span class="number">0</span>]+<span class="string">" - "</span>; two = two+<span class="string">"|  "</span>; three = three+<span class="string">" - "</span>;</span><br><span class="line">				four = four+<span class="string">"| |"</span>; five = five+<span class="string">" - "</span>; <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'7'</span>:</span><br><span class="line">				restring[<span class="number">0</span>] = restring[<span class="number">0</span>]+<span class="string">" - "</span>; two = two+<span class="string">"  |"</span>; three = three+<span class="string">"  |"</span>;</span><br><span class="line">				four = four+<span class="string">"  |"</span>; five = five+<span class="string">"  |"</span>; <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'8'</span>:</span><br><span class="line">				restring[<span class="number">0</span>] = restring[<span class="number">0</span>]+<span class="string">" - "</span>; two = two+<span class="string">"| |"</span>; three = three+<span class="string">" - "</span>;</span><br><span class="line">				four = four+<span class="string">"| |"</span>; five = five+<span class="string">" - "</span>; <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'9'</span>:</span><br><span class="line">				restring[<span class="number">0</span>] = restring[<span class="number">0</span>]+<span class="string">" - "</span>; two = two+<span class="string">"| |"</span>; three = three+<span class="string">" - "</span>;</span><br><span class="line">				four = four+<span class="string">"  |"</span>; five = five+<span class="string">" - "</span>; <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">				restring[<span class="number">0</span>] = restring[<span class="number">0</span>]+<span class="string">"   "</span>; two = two+<span class="string">"   "</span>; three = three+<span class="string">" * "</span>;</span><br><span class="line">				four = four+<span class="string">"   "</span>; five = five+<span class="string">"   "</span>; <span class="keyword">break</span>;			</span><br><span class="line">			&#125;		</span><br><span class="line">		<span class="comment">//restring[0] = restring[0];</span></span><br><span class="line">		restring[<span class="number">1</span>] = two;</span><br><span class="line">		restring[<span class="number">2</span>] = three;</span><br><span class="line">		restring[<span class="number">3</span>] = four;</span><br><span class="line">		restring[<span class="number">4</span>] = five;</span><br><span class="line">		<span class="keyword">return</span> restring;</span><br><span class="line">	&#125;</span><br><span class="line">		</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//System.out.println(null+"ddddd");</span></span><br><span class="line"></span><br><span class="line">		Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;				</span><br><span class="line">				value = scanner.nextInt();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">				System.out.println(e);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span> (value&lt;<span class="number">1</span>)&#123;</span><br><span class="line">				System.out.println(<span class="string">"参数有误"</span>);</span><br><span class="line">				<span class="keyword">return</span> ;			</span><br><span class="line">			&#125;</span><br><span class="line">		</span><br><span class="line">			</span><br><span class="line">			String dayin = getshuzu(value);</span><br><span class="line">	        System.out.println(dayin.substring(<span class="number">1</span>));<span class="comment">//从第二个字符开始截取截取</span></span><br><span class="line">			String[] valuestrings = getstrings(dayin.substring(<span class="number">1</span>));</span><br><span class="line">			<span class="keyword">for</span> (String s : valuestrings) &#123;</span><br><span class="line">				System.out.println(s);			</span><br><span class="line">			&#125;	</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="代码（非递归）">代码（非递归）</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Test361</span> &#123;</span></span><br><span class="line"></span><br><span class="line">	public static void main(<span class="constant">String</span>[] args) &#123;</span><br><span class="line">		<span class="constant">Scanner</span> sc = new <span class="constant">Scanner</span>(<span class="constant">System</span>.<span class="keyword">in</span>); </span><br><span class="line">		int n;</span><br><span class="line">		<span class="keyword">while</span>(sc.hasNext())&#123; </span><br><span class="line">			n = sc.nextInt();</span><br><span class="line">			<span class="constant">List</span>&lt;<span class="constant">Integer</span>&gt; gcd =  primeFactor(n);</span><br><span class="line">			<span class="constant">Iterator</span> it = gcd.iterator();</span><br><span class="line">			<span class="constant">String</span> resulttostring = <span class="string">""</span>;<span class="regexp">//</span>结果串</span><br><span class="line">			<span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">				<span class="constant">String</span> <span class="keyword">next</span> =  it.<span class="keyword">next</span>().toString(); </span><br><span class="line">				resulttostring = resulttostring + <span class="keyword">next</span> + <span class="string">"*"</span>; </span><br><span class="line">			&#125;</span><br><span class="line">			resulttostring = resulttostring.substring(<span class="number">0</span>, resulttostring.length()-<span class="number">1</span>);<span class="regexp">//</span>去掉最后一个*</span><br><span class="line">			</span><br><span class="line">		<span class="constant">System</span>.out.println(resulttostring);	</span><br><span class="line">		printresult(resulttostring);</span><br><span class="line">			 </span><br><span class="line">		&#125;  </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	 </span><br><span class="line">	public static <span class="constant">List</span>&lt;<span class="constant">Integer</span>&gt; primeFactor(int n) &#123;<span class="regexp">//</span> 该方法将一个正整数分解成质因数相乘的形式  </span><br><span class="line">		</span><br><span class="line">		<span class="constant">List</span>&lt;<span class="constant">Integer</span>&gt; resultlist = new <span class="constant">LinkedList</span>&lt;<span class="constant">Integer</span>&gt;();</span><br><span class="line">				int num = n; </span><br><span class="line">				<span class="keyword">if</span> (num &lt; <span class="number">2</span>) &#123;<span class="regexp">//</span> 若输入的数小于<span class="number">2</span>,输出提示信息 </span><br><span class="line">					resultlist.add(num);</span><br><span class="line">					<span class="keyword">return</span> resultlist;</span><br><span class="line">				&#125; </span><br><span class="line">				<span class="keyword">else</span>&#123; </span><br><span class="line">					int primeNumber = <span class="number">2</span>;<span class="regexp">//</span> 定义最小的质数 </span><br><span class="line">					<span class="keyword">while</span> (primeNumber &lt;= num) &#123;<span class="regexp">//</span> 在质数小于输入的数时，进行循环 </span><br><span class="line">						<span class="keyword">if</span> (primeNumber == num) &#123;<span class="regexp">//</span> 当质数等于输入的数时,直接输出 </span><br><span class="line">							resultlist.add(num);</span><br><span class="line">							<span class="keyword">break</span>;<span class="regexp">//</span> 跳出循环</span><br><span class="line">						&#125; </span><br><span class="line">						<span class="keyword">else</span> <span class="keyword">if</span> (num % primeNumber == <span class="number">0</span>) &#123;<span class="regexp">//</span> 当输入的数与质数的余数为<span class="number">0</span>时,输出这个质数</span><br><span class="line">							resultlist.add(primeNumber);</span><br><span class="line">							num = num / primeNumber;<span class="regexp">//</span> 把剩下的结果赋给num</span><br><span class="line">							</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">else</span> &#123;<span class="regexp">//</span> 在余数不为<span class="number">0</span>时,质数递增</span><br><span class="line">							primeNumber++;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span> resultlist; </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public static void printresult(<span class="constant">String</span> resulttostring)&#123;</span><br><span class="line"></span><br><span class="line">		char num<span class="number">0</span>[][]= </span><br><span class="line">			&#123;</span><br><span class="line">				&#123; <span class="string">' '</span>,<span class="string">'-'</span>,<span class="string">' '</span>&#125;,</span><br><span class="line">				&#123;<span class="string">'|'</span>,<span class="string">' '</span>,<span class="string">'|'</span>&#125;, </span><br><span class="line">				&#123;<span class="string">' '</span>,<span class="string">' '</span>,<span class="string">' '</span>&#125;,</span><br><span class="line">				&#123;<span class="string">'|'</span>,<span class="string">' '</span>,<span class="string">' '</span>&#125;,</span><br><span class="line">				&#123;<span class="string">' '</span>,<span class="string">'-'</span>,<span class="string">' '</span>&#125;</span><br><span class="line">				&#125;;</span><br><span class="line">		char num1[][]= </span><br><span class="line">			&#123;</span><br><span class="line">				&#123;<span class="string">' '</span>,<span class="string">' '</span>,<span class="string">'|'</span>&#125;,</span><br><span class="line">				&#123;<span class="string">' '</span>,<span class="string">' '</span>,<span class="string">'|'</span>&#125;, </span><br><span class="line">				&#123;<span class="string">' '</span>,<span class="string">' '</span>,<span class="string">' '</span>&#125;,</span><br><span class="line">				&#123;<span class="string">' '</span>,<span class="string">' '</span>,<span class="string">'|'</span>&#125;,</span><br><span class="line">				&#123;<span class="string">' '</span>,<span class="string">' '</span>,<span class="string">'|'</span>&#125;</span><br><span class="line">				&#125;;</span><br><span class="line">		char num2[][]= </span><br><span class="line">			&#123;</span><br><span class="line">				&#123;<span class="string">' '</span>,<span class="string">'-'</span>,<span class="string">' '</span>&#125;,</span><br><span class="line">				&#123;<span class="string">' '</span>,<span class="string">' '</span>,<span class="string">'|'</span>&#125;, </span><br><span class="line">				&#123;<span class="string">' '</span>,<span class="string">'-'</span>,<span class="string">' '</span>&#125;,</span><br><span class="line">				&#123;<span class="string">'|'</span>,<span class="string">' '</span>,<span class="string">' '</span>&#125;,</span><br><span class="line">				&#123;<span class="string">' '</span>,<span class="string">'-'</span>,<span class="string">' '</span>&#125;</span><br><span class="line">				&#125;;</span><br><span class="line">		char num3[][]= </span><br><span class="line">			&#123;</span><br><span class="line">				&#123;<span class="string">' '</span>,<span class="string">'-'</span>,<span class="string">' '</span>&#125;,</span><br><span class="line">				&#123;<span class="string">' '</span>,<span class="string">' '</span>,<span class="string">'|'</span>&#125;, </span><br><span class="line">				&#123;<span class="string">' '</span>,<span class="string">'-'</span>,<span class="string">' '</span>&#125;,</span><br><span class="line">				&#123;<span class="string">' '</span>,<span class="string">' '</span>,<span class="string">'|'</span>&#125;,</span><br><span class="line">				&#123;<span class="string">' '</span>,<span class="string">'-'</span>,<span class="string">' '</span>&#125;</span><br><span class="line">				&#125;;</span><br><span class="line">		char num4[][]= </span><br><span class="line">			&#123;</span><br><span class="line">				&#123;<span class="string">' '</span>,<span class="string">' '</span>,<span class="string">' '</span>&#125;,</span><br><span class="line">				&#123;<span class="string">'|'</span>,<span class="string">' '</span>,<span class="string">'|'</span>&#125;, </span><br><span class="line">				&#123;<span class="string">' '</span>,<span class="string">'-'</span>,<span class="string">' '</span>&#125;,</span><br><span class="line">				&#123;<span class="string">' '</span>,<span class="string">' '</span>,<span class="string">'|'</span>&#125;,</span><br><span class="line">				&#123;<span class="string">' '</span>,<span class="string">' '</span>,<span class="string">' '</span>&#125;</span><br><span class="line">				&#125;;</span><br><span class="line">		char num5[][]= </span><br><span class="line">			&#123;</span><br><span class="line">				&#123;<span class="string">' '</span>,<span class="string">'-'</span>,<span class="string">' '</span>&#125;,</span><br><span class="line">				&#123;<span class="string">'|'</span>,<span class="string">' '</span>,<span class="string">' '</span>&#125;, </span><br><span class="line">				&#123;<span class="string">' '</span>,<span class="string">'-'</span>,<span class="string">' '</span>&#125;,</span><br><span class="line">				&#123;<span class="string">' '</span>,<span class="string">' '</span>,<span class="string">'|'</span>&#125;,</span><br><span class="line">				&#123;<span class="string">' '</span>,<span class="string">'-'</span>,<span class="string">' '</span>&#125;</span><br><span class="line">				&#125;;</span><br><span class="line">		char num6[][]= </span><br><span class="line">			&#123;</span><br><span class="line">				&#123;<span class="string">' '</span>,<span class="string">'-'</span>,<span class="string">' '</span>&#125;,</span><br><span class="line">				&#123;<span class="string">'|'</span>,<span class="string">' '</span>,<span class="string">' '</span>&#125;, </span><br><span class="line">				&#123;<span class="string">' '</span>,<span class="string">'-'</span>,<span class="string">' '</span>&#125;,</span><br><span class="line">				&#123;<span class="string">'|'</span>,<span class="string">' '</span>,<span class="string">'|'</span>&#125;,</span><br><span class="line">				&#123;<span class="string">' '</span>,<span class="string">'-'</span>,<span class="string">' '</span>&#125;</span><br><span class="line">				&#125;;</span><br><span class="line">		char num7[][]= </span><br><span class="line">			&#123;</span><br><span class="line">				&#123;<span class="string">' '</span>,<span class="string">'-'</span>,<span class="string">' '</span>&#125;,</span><br><span class="line">				&#123;<span class="string">' '</span>,<span class="string">' '</span>,<span class="string">'|'</span>&#125;, </span><br><span class="line">				&#123;<span class="string">' '</span>,<span class="string">' '</span>,<span class="string">' '</span>&#125;,</span><br><span class="line">				&#123;<span class="string">' '</span>,<span class="string">' '</span>,<span class="string">'|'</span>&#125;,</span><br><span class="line">				&#123;<span class="string">' '</span>,<span class="string">' '</span>,<span class="string">' '</span>&#125;</span><br><span class="line">				&#125;;</span><br><span class="line">		char num8[][]= </span><br><span class="line">			&#123;</span><br><span class="line">				&#123;<span class="string">' '</span>,<span class="string">'-'</span>,<span class="string">' '</span>&#125;,</span><br><span class="line">				&#123;<span class="string">'|'</span>,<span class="string">' '</span>,<span class="string">'|'</span>&#125;, </span><br><span class="line">				&#123;<span class="string">' '</span>,<span class="string">'-'</span>,<span class="string">' '</span>&#125;,</span><br><span class="line">				&#123;<span class="string">'|'</span>,<span class="string">' '</span>,<span class="string">'|'</span>&#125;,</span><br><span class="line">				&#123;<span class="string">' '</span>,<span class="string">'-'</span>,<span class="string">' '</span>&#125;</span><br><span class="line">				&#125;;</span><br><span class="line">		char num9[][]= </span><br><span class="line">			&#123;</span><br><span class="line">				&#123;<span class="string">' '</span>,<span class="string">'-'</span>,<span class="string">' '</span>&#125;,</span><br><span class="line">				&#123;<span class="string">'|'</span>,<span class="string">' '</span>,<span class="string">'|'</span>&#125;, </span><br><span class="line">				&#123;<span class="string">' '</span>,<span class="string">'-'</span>,<span class="string">' '</span>&#125;,</span><br><span class="line">				&#123;<span class="string">' '</span>,<span class="string">' '</span>,<span class="string">'|'</span>&#125;,</span><br><span class="line">				&#123;<span class="string">' '</span>,<span class="string">'-'</span>,<span class="string">'|'</span>&#125;</span><br><span class="line">				&#125;;</span><br><span class="line">		 char num1<span class="number">0</span>[][]=&#123;<span class="regexp">//</span>代表*号</span><br><span class="line">				    &#123;<span class="string">' '</span>&#125;,</span><br><span class="line">					&#123;<span class="string">' '</span>,&#125;, </span><br><span class="line">					&#123;<span class="string">'*'</span>,&#125;,</span><br><span class="line">					&#123;<span class="string">' '</span>,&#125;,</span><br><span class="line">					&#123;<span class="string">' '</span>,&#125;</span><br><span class="line">					&#125;;</span><br><span class="line">		 </span><br><span class="line">		 <span class="constant">StringBuffer</span>[] result = &#123; new <span class="constant">StringBuffer</span>() ,new <span class="constant">StringBuffer</span>() ,new <span class="constant">StringBuffer</span>() ,new <span class="constant">StringBuffer</span>(),new <span class="constant">StringBuffer</span>()&#125;; </span><br><span class="line">		 int i = <span class="number">0</span>;</span><br><span class="line">		 int length = resulttostring.length();</span><br><span class="line">		 <span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;length;i++)&#123;<span class="regexp">//</span>结果字符串</span><br><span class="line">			 char  temp = resulttostring.charAt(i);<span class="regexp">//</span>每个字符  </span><br><span class="line">			 <span class="keyword">for</span>(int j = <span class="number">0</span> ;j&lt;<span class="number">5</span>;j++)&#123;</span><br><span class="line">					 switch(temp)&#123;</span><br><span class="line">						 <span class="keyword">case</span> <span class="string">'0'</span><span class="symbol">:</span>   result[j].append(num<span class="number">0</span>[j]); <span class="keyword">break</span>;</span><br><span class="line">						 <span class="keyword">case</span> <span class="string">'1'</span><span class="symbol">:</span>	 result[j].append(num1[j]); <span class="keyword">break</span>;</span><br><span class="line">						 <span class="keyword">case</span> <span class="string">'2'</span><span class="symbol">:</span>	 result[j].append(num2[j]); <span class="keyword">break</span>;</span><br><span class="line">						 <span class="keyword">case</span> <span class="string">'3'</span><span class="symbol">:</span>	 result[j].append(num3[j]); <span class="keyword">break</span>;</span><br><span class="line">						 <span class="keyword">case</span> <span class="string">'4'</span><span class="symbol">:</span>	 result[j].append(num4[j]); <span class="keyword">break</span>;</span><br><span class="line">						 <span class="keyword">case</span> <span class="string">'5'</span><span class="symbol">:</span>	 result[j].append(num5[j]); <span class="keyword">break</span>;</span><br><span class="line">						 <span class="keyword">case</span> <span class="string">'6'</span><span class="symbol">:</span>	 result[j].append(num6[j]); <span class="keyword">break</span>;</span><br><span class="line">						 <span class="keyword">case</span> <span class="string">'7'</span><span class="symbol">:</span>	 result[j].append(num7[j]); <span class="keyword">break</span>;</span><br><span class="line">						 <span class="keyword">case</span> <span class="string">'8'</span><span class="symbol">:</span>	 result[j].append(num8[j]); <span class="keyword">break</span>;</span><br><span class="line">						 <span class="keyword">case</span> <span class="string">'9'</span><span class="symbol">:</span>	 result[j].append(num9[j]); <span class="keyword">break</span>;</span><br><span class="line">						 <span class="keyword">case</span> <span class="string">'*'</span><span class="symbol">:</span>    result[j].append(num1<span class="number">0</span>[j]); <span class="keyword">break</span>;</span><br><span class="line">						 <span class="symbol">default:</span> <span class="keyword">break</span>;</span><br><span class="line">					 &#125;</span><br><span class="line">			 &#125;  </span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">		 <span class="keyword">for</span>(int k = <span class="number">0</span>;k&lt;<span class="number">5</span>; k++)&#123;</span><br><span class="line">			<span class="constant">System</span>.out.println(result[k]);</span><br><span class="line">		&#125;</span><br><span class="line">				</span><br><span class="line">		 </span><br><span class="line">	&#125; </span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="输入格式及输出结果截图-1">输入格式及输出结果截图</h3><p><img src="/img/result2.png" alt="result2"></p>
<h2 id="总结">总结</h2><p>第二道题的两段代码是两位学长提供的，在此感谢学长的耐心讲解。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天奇虎360在线笔试，把最后两道编程题总结下来，难度不是特别大，但有些麻烦。<br>]]>
    
    </summary>
    
      <category term="java" scheme="http://yangqinghua.com/tags/java/"/>
    
      <category term="笔试" scheme="http://yangqinghua.com/tags/%E7%AC%94%E8%AF%95/"/>
    
      <category term="Algorithm" scheme="http://yangqinghua.com/categories/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[消除字符串中多余的空格]]></title>
    <link href="http://yangqinghua.com/2015/09/06/%E6%B6%88%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%A4%9A%E4%BD%99%E7%9A%84%E7%A9%BA%E6%A0%BC/"/>
    <id>http://yangqinghua.com/2015/09/06/消除字符串中多余的空格/</id>
    <published>2015-09-06T07:49:05.000Z</published>
    <updated>2015-09-16T14:00:20.000Z</updated>
    <content type="html"><![CDATA[<p>一道美团的笔试题，去掉字符串中首部和尾部的空格，若字符串中有连续多个空格只保留一个。<br><a id="more"></a></p>
<h2 id="代码">代码</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</span><br><span class="line">	 <span class="keyword">public</span> <span class="keyword">static</span> String convert(String <span class="keyword">source</span>) &#123;</span><br><span class="line">		</span><br><span class="line">	      String str=<span class="keyword">source</span>.trim();</span><br><span class="line">              <span class="comment">//String str2=source.replace(" ","");//去掉所有空格</span></span><br><span class="line">	      String str2=<span class="keyword">source</span>.trim().replaceAll(<span class="string">"\\s+"</span>,<span class="string">" "</span>);</span><br><span class="line">	      <span class="keyword">return</span> str2;</span><br><span class="line">	       </span><br><span class="line">	    &#125;</span><br><span class="line">	 <span class="keyword">public</span> <span class="keyword">static</span> String convert2(String <span class="keyword">source</span>)<span class="comment">//自己写方法实现</span></span><br><span class="line">	 &#123;</span><br><span class="line">		 <span class="keyword">source</span>=<span class="keyword">source</span>.trim();</span><br><span class="line">		 StringBuffer sb=<span class="keyword">new</span> StringBuffer();</span><br><span class="line">		 <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">source</span>.length();i++)</span><br><span class="line">		 &#123;</span><br><span class="line">			 <span class="keyword">if</span>(<span class="keyword">source</span>.charAt(i)!=<span class="string">' '</span>)</span><br><span class="line">			 &#123;</span><br><span class="line">				 sb.<span class="keyword">append</span>(<span class="keyword">source</span>.charAt(i));</span><br><span class="line">		     &#125;</span><br><span class="line">			 <span class="keyword">if</span>(<span class="keyword">source</span>.charAt(i)==<span class="string">' '</span>&amp;&amp;<span class="keyword">source</span>.charAt(i+<span class="number">1</span>)!=<span class="string">' '</span>)</span><br><span class="line">			 &#123;</span><br><span class="line">				 sb.<span class="keyword">append</span>(<span class="string">' '</span>);</span><br><span class="line">			 &#125;</span><br><span class="line">		 &#125;</span><br><span class="line">		 <span class="keyword">return</span>  sb.toString();</span><br><span class="line">		 </span><br><span class="line">	 &#125;</span><br><span class="line">	 <span class="keyword">public</span> <span class="keyword">static</span> String convert(String <span class="keyword">source</span>,<span class="keyword">char</span> ch)</span><br><span class="line">	 &#123;</span><br><span class="line">		 StringBuffer buffer=<span class="keyword">new</span> StringBuffer();</span><br><span class="line">		 <span class="keyword">int</span> position=<span class="number">0</span>;</span><br><span class="line">		 <span class="keyword">char</span> currentchar;</span><br><span class="line">		 <span class="keyword">while</span>(position&lt;<span class="keyword">source</span>.length())</span><br><span class="line">		 &#123;</span><br><span class="line">			 currentchar=<span class="keyword">source</span>.charAt(position++);</span><br><span class="line">			 <span class="keyword">if</span>(currentchar!=ch)</span><br><span class="line">			 &#123;</span><br><span class="line">				 buffer.<span class="keyword">append</span>(currentchar);</span><br><span class="line">			 &#125;</span><br><span class="line">			 </span><br><span class="line">		 &#125;</span><br><span class="line">		 <span class="keyword">return</span> buffer.toString();</span><br><span class="line">	 &#125;</span><br><span class="line">	 <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String args[])&#123;</span><br><span class="line">	     System.out.<span class="keyword">println</span>(convert2(<span class="string">" abcd           efgh  ijk "</span>));</span><br><span class="line"><span class="comment">//		 System.out.println(convert("sdf sdafasdf aasdf",' '));</span></span><br><span class="line">	 &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>一道美团的笔试题，去掉字符串中首部和尾部的空格，若字符串中有连续多个空格只保留一个。<br>]]>
    
    </summary>
    
      <category term="java" scheme="http://yangqinghua.com/tags/java/"/>
    
      <category term="字符串" scheme="http://yangqinghua.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="笔试" scheme="http://yangqinghua.com/tags/%E7%AC%94%E8%AF%95/"/>
    
      <category term="Algorithm" scheme="http://yangqinghua.com/categories/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[排列算法递归实现]]></title>
    <link href="http://yangqinghua.com/2015/08/16/%E6%8E%92%E5%88%97%E7%AE%97%E6%B3%95%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yangqinghua.com/2015/08/16/排列算法递归实现/</id>
    <published>2015-08-16T07:49:05.000Z</published>
    <updated>2015-08-18T08:24:17.000Z</updated>
    <content type="html"><![CDATA[<p>全排列是将一组数据按顺序进行排列，如果这组数据有n个，那么全排列的个数为n！个，比如集合{1，2，3}的全排列为：<br><br><br>{1 2 3}<br><br><br>{1 3 2}<br><br><br>{2 1 3}<br><br><br>{2 3 1}<br><br><br>{3 2 1}<br><br><br>{3 1 2}<br><a id="more"></a></p>
<h2 id="算法思想">算法思想</h2><blockquote>
<ul>
<li>n个元素的全排列=(一个元素作为前缀)+(剩下n-1个元素的全排列)；</li>
<li>递归出口:如果只有一个元素的全排列，则说明已经排完，则输出数组；</li>
<li>不断将每个元素放作第一个元素，然后将这个元素作为前缀，并将其余元素继续全排列，等到出口输出；<h2 id="代码">代码</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Rank</span> &#123;  </span><br><span class="line"> </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span>(<span class="params"><span class="keyword">int</span> i1, <span class="keyword">int</span> i2</span>) </span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> temp = arr[i2];  </span><br><span class="line">        arr[i2] = arr[i1];  </span><br><span class="line">        arr[i1] = temp;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span>(<span class="params"><span class="keyword">int</span> arr[], <span class="keyword">int</span> begin,<span class="keyword">int</span> end</span>) </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(end==begin)&#123;         <span class="comment">//一到递归的出口就输出数组，此数组为全排列  </span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=end;i++)&#123;  </span><br><span class="line">                System.<span class="keyword">out</span>.print(arr[i]+<span class="string">" "</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">            System.<span class="keyword">out</span>.println();  </span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">else</span>&#123;  </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=begin;j&lt;=end;j++)&#123;   </span><br><span class="line">                swap(begin,j);      <span class="comment">//for循环将begin~end中的每个数放到begin位置中去  </span></span><br><span class="line">                f(arr,begin+<span class="number">1</span>,end);  <span class="comment">//假设begin位置确定，那么对begin+1~end中的数继续递归  </span></span><br><span class="line">                swap(begin,j);      <span class="comment">//换过去后再还原  </span></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;  </span><br><span class="line">       f(arr,<span class="number">0</span>,arr.length-<span class="number">1</span>);  </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h2 id="排列变形">排列变形</h2><p>想到一个困惑很久的关于递归的问题，大概是这样描述的：有字母a，b，c，用递归的方法产生有这些字符组成的，且长度为n的所有可能的字符串及字符串个数。在去年看考研真题的时候碰见过这道编程题，当时没有想起了怎么做，结果在今年考研复试中又遇到了，现在把它整理下来。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rank2</span> </span>&#123; </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span> p[];</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> num;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count=<span class="number">1</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">char</span> p[])</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">	    System.out.print(<span class="string">"第"</span>+count+<span class="string">"行"</span>);</span><br><span class="line">	    System.out.println(<span class="keyword">new</span> String(p));</span><br><span class="line">	    count++;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			p[num-<span class="number">1</span>]=<span class="string">'a'</span>;</span><br><span class="line">			print(p);</span><br><span class="line">			p[num-<span class="number">1</span>]=<span class="string">'b'</span>;</span><br><span class="line">			print(p);</span><br><span class="line">			p[num-<span class="number">1</span>]=<span class="string">'c'</span>;</span><br><span class="line">			print(p);</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(n&lt;<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.printf(<span class="string">"error!"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> </span><br><span class="line">		&#123;</span><br><span class="line">			p[num-n]=<span class="string">'a'</span>;</span><br><span class="line">			f(n-<span class="number">1</span>);</span><br><span class="line">			p[num-n]=<span class="string">'b'</span>;</span><br><span class="line">			f(n-<span class="number">1</span>);</span><br><span class="line">			p[num-n]=<span class="string">'c'</span>;</span><br><span class="line">			f(n-<span class="number">1</span>);</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		Scanner scan=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		num=scan.nextInt();</span><br><span class="line">		p=<span class="keyword">new</span> <span class="keyword">char</span>[num];</span><br><span class="line">		f(num);</span><br><span class="line">	&#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>全排列是将一组数据按顺序进行排列，如果这组数据有n个，那么全排列的个数为n！个，比如集合{1，2，3}的全排列为：<br></br><br>{1 2 3}<br></br><br>{1 3 2}<br></br><br>{2 1 3}<br></br><br>{2 3 1}<br></br><br>{3 2 1}<br></br><br>{3 1 2}<br>]]>
    
    </summary>
    
      <category term="java" scheme="http://yangqinghua.com/tags/java/"/>
    
      <category term="递归" scheme="http://yangqinghua.com/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="Algorithm" scheme="http://yangqinghua.com/categories/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode：ZigZag Conversion(6)]]></title>
    <link href="http://yangqinghua.com/2015/08/06/LeetCode%EF%BC%9AZigZag%20Conversion(6)/"/>
    <id>http://yangqinghua.com/2015/08/06/LeetCode：ZigZag Conversion(6)/</id>
    <published>2015-08-06T07:49:05.000Z</published>
    <updated>2015-08-09T13:02:39.000Z</updated>
    <content type="html"><![CDATA[<h2 id="总结">总结</h2><p><a href="http://leetcode.com" target="_blank" rel="external">leetcode</a>是一个在线编程网站，上面主要收集了各大IT公司的笔试面试题，今天尝试做了一道difficulty是easy的题目，然而还是出现了很多问题，差不多写了快100行代码，问题的突破口还是没有找到，没办法只能baidu一下找答案，看到答案的一瞬间内心崩溃，两个for循环解决问题。感觉这种刷题方法意义不是很大，还是需要自己实现功能，之后再去找更高效的代码。<br><br>下面是答案：<br><a id="more"></a></p>
<h2 id="源码">源码</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</span><br><span class="line">	 <span class="keyword">public</span> <span class="keyword">static</span> String convert(String s, <span class="keyword">int</span> nRows) &#123;</span><br><span class="line">	        <span class="keyword">int</span> length = s.length();</span><br><span class="line">	        <span class="keyword">if</span> (length &lt;= nRows || nRows == <span class="number">1</span>) <span class="keyword">return</span> s;</span><br><span class="line">	        <span class="keyword">char</span>[] chars = <span class="keyword">new</span> <span class="keyword">char</span>[length];<span class="comment">//转成数组</span></span><br><span class="line">	        <span class="keyword">int</span> <span class="keyword">step</span> = <span class="number">2</span> * (nRows - <span class="number">1</span>);</span><br><span class="line">	        <span class="keyword">int</span> <span class="keyword">count</span> = <span class="number">0</span>;</span><br><span class="line">		    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nRows; i++)&#123;</span><br><span class="line">	    		<span class="keyword">int</span> interval = <span class="keyword">step</span> - <span class="number">2</span> * i;<span class="comment">//第i行 之间的间隔</span></span><br><span class="line">	    		<span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; length; j += <span class="keyword">step</span>)&#123;</span><br><span class="line">	    		   	chars[<span class="keyword">count</span>] = s.charAt(j);<span class="comment">//返回指定位置的字符</span></span><br><span class="line">	    			<span class="keyword">count</span>++;</span><br><span class="line">	    			<span class="keyword">if</span> (interval &lt; <span class="keyword">step</span> &amp;&amp; interval &gt; <span class="number">0</span> </span><br><span class="line">	    &amp;&amp; j + interval &lt; length &amp;&amp; <span class="keyword">count</span> &lt;  length)&#123;</span><br><span class="line">	    				chars[<span class="keyword">count</span>] = s.charAt(j + interval);</span><br><span class="line">	    				<span class="keyword">count</span>++;</span><br><span class="line">	    			&#125;</span><br><span class="line">	    		&#125;</span><br><span class="line">	    	&#125;</span><br><span class="line">	        <span class="keyword">return</span> <span class="keyword">new</span> String(chars);</span><br><span class="line">	    &#125;</span><br><span class="line">	 <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String args)&#123;</span><br><span class="line">		 System.out.<span class="keyword">println</span>(convert(<span class="string">"abcdefghijk"</span>,<span class="number">3</span>));</span><br><span class="line">		 </span><br><span class="line">	 &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="总结">总结</h2><p><a href="http://leetcode.com">leetcode</a>是一个在线编程网站，上面主要收集了各大IT公司的笔试面试题，今天尝试做了一道difficulty是easy的题目，然而还是出现了很多问题，差不多写了快100行代码，问题的突破口还是没有找到，没办法只能baidu一下找答案，看到答案的一瞬间内心崩溃，两个for循环解决问题。感觉这种刷题方法意义不是很大，还是需要自己实现功能，之后再去找更高效的代码。<br><br>下面是答案：<br>]]>
    
    </summary>
    
      <category term="LeetCode" scheme="http://yangqinghua.com/tags/LeetCode/"/>
    
      <category term="java" scheme="http://yangqinghua.com/tags/java/"/>
    
      <category term="Algorithm" scheme="http://yangqinghua.com/categories/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python爬虫:抓取网上的段子]]></title>
    <link href="http://yangqinghua.com/2015/07/28/Python%E7%88%AC%E8%99%AB%EF%BC%9A%E6%8A%93%E5%8F%96%E7%BD%91%E4%B8%8A%E7%9A%84%E6%AE%B5%E5%AD%90/"/>
    <id>http://yangqinghua.com/2015/07/28/Python爬虫：抓取网上的段子/</id>
    <published>2015-07-28T07:49:05.000Z</published>
    <updated>2015-07-30T12:45:17.000Z</updated>
    <content type="html"><![CDATA[<p>自学python有一个星期了，一直在看语法，很是乏味，于是想写个爬虫，参照<a href="http：//cuiqingcai.com">网上的例子</a>实现的第一个爬虫是抓取糗事百科里的段子。主要用到了<code>urllib2</code>模块。<br><br><a id="more"></a></p>
<h2 id="爬虫源代码：">爬虫源代码：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment">#糗事百科爬虫类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QSBK</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#初始化方法，定义一些变量</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.pageIndex = <span class="number">1</span></span><br><span class="line">        self.user_agent = <span class="string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.107 Safari/537.36'</span></span><br><span class="line">        <span class="comment">#初始化headers</span></span><br><span class="line">        self.headers = &#123; <span class="string">'User-Agent'</span> : self.user_agent &#125;</span><br><span class="line">        <span class="comment">#存放段子的变量，每一个元素是每一页的段子们</span></span><br><span class="line">        self.stories = []</span><br><span class="line">        <span class="comment">#存放程序是否继续运行的变量</span></span><br><span class="line">        self.enable = <span class="keyword">False</span></span><br><span class="line">    <span class="comment">#传入某一页的索引获得页面代码</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getPage</span><span class="params">(self,pageIndex)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            url = <span class="string">'http://www.qiushibaike.com/hot/page/'</span> + str(pageIndex)</span><br><span class="line">            <span class="comment">#构建请求的request</span></span><br><span class="line">            request = urllib2.Request(url,headers = self.headers)</span><br><span class="line">            <span class="comment">#利用urlopen获取页面代码</span></span><br><span class="line">            response = urllib2.urlopen(request)</span><br><span class="line">            <span class="comment">#将页面转化为UTF-8编码</span></span><br><span class="line">            pageCode = response.read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">            <span class="keyword">return</span> pageCode</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> urllib2.URLError, e:</span><br><span class="line">            <span class="keyword">if</span> hasattr(e,<span class="string">"reason"</span>):</span><br><span class="line">                <span class="keyword">print</span> <span class="string">u"连接糗事百科失败,错误原因"</span>,e.reason</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#传入某一页代码，返回本页不带图片的段子列表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getPageItems</span><span class="params">(self,pageIndex)</span>:</span></span><br><span class="line">        pageCode = self.getPage(pageIndex)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pageCode:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"页面加载失败...."</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        pattern = re.compile(<span class="string">'&lt;div.*?class="author.*?&gt;.*?&lt;a.*?&gt;.*?/&gt;(.*?)&lt;/a&gt;.*?&lt;div.*?class'</span>+</span><br><span class="line">                    <span class="string">'="content".*?&gt;(.*?)&lt;!--(.*?)--&gt;.*?&lt;/div&gt;.*?&lt;div class="stats.*?class="number"&gt;(.*?)&lt;/i&gt;'</span>,re.S)</span><br><span class="line">        items = re.findall(pattern,pageCode)</span><br><span class="line">        <span class="comment">#用来存储每页的段子们</span></span><br><span class="line">        pageStories = []</span><br><span class="line">        <span class="comment">#遍历正则表达式匹配的信息</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">          </span><br><span class="line">                <span class="comment">#item[0]是一个段子的作者，item[1]是内容,item[2]发布时间，item[3]是点赞数</span></span><br><span class="line">                pageStories.append([item[<span class="number">0</span>].strip(),item[<span class="number">1</span>].strip(),item[<span class="number">2</span>].strip(),item[<span class="number">3</span>].strip()])</span><br><span class="line">        <span class="keyword">return</span> pageStories</span><br><span class="line"></span><br><span class="line">    <span class="comment">#加载并提取页面的内容，加入到列表中</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loadPage</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#如果当前未看的页数少于2页，则加载新一页</span></span><br><span class="line">        <span class="keyword">if</span> self.enable == <span class="keyword">True</span>:</span><br><span class="line">            <span class="keyword">if</span> len(self.stories) &lt; <span class="number">2</span>:</span><br><span class="line">                <span class="comment">#获取新一页</span></span><br><span class="line">                pageStories = self.getPageItems(self.pageIndex)</span><br><span class="line">                <span class="comment">#将该页的段子存放到全局list中</span></span><br><span class="line">                <span class="keyword">if</span> pageStories:</span><br><span class="line">                    self.stories.append(pageStories)</span><br><span class="line">                    <span class="comment">#获取完之后页码索引加一，表示下次读取下一页</span></span><br><span class="line">                    self.pageIndex += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#调用该方法，每次敲回车打印输出一个段子</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getOneStory</span><span class="params">(self,pageStories,page)</span>:</span></span><br><span class="line">        <span class="comment">#遍历一页的段子</span></span><br><span class="line">        <span class="keyword">for</span> story <span class="keyword">in</span> pageStories:</span><br><span class="line">            <span class="comment">#等待用户输入</span></span><br><span class="line">            input = raw_input()</span><br><span class="line">            <span class="comment">#每当输入回车一次，判断一下是否要加载新页面</span></span><br><span class="line">            self.loadPage()</span><br><span class="line">            <span class="comment">#如果输入Q则程序结束</span></span><br><span class="line">            <span class="keyword">if</span> input == <span class="string">"Q"</span>:</span><br><span class="line">                self.enable = <span class="keyword">False</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">u"第%d页\t发布人:%s\t发布内容:%s\n发布时间:%s\n点赞:%s\n"</span> %(page,story[<span class="number">0</span>],story[<span class="number">1</span>],story[<span class="number">2</span>],story[<span class="number">3</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#开始方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">u"正在读取糗事百科,按回车查看新段子，Q退出"</span></span><br><span class="line">        <span class="comment">#使变量为True，程序可以正常运行</span></span><br><span class="line">        self.enable = <span class="keyword">True</span></span><br><span class="line">        <span class="comment">#先加载一页内容</span></span><br><span class="line">        self.loadPage()</span><br><span class="line">        <span class="comment">#局部变量，控制当前读到了第几页</span></span><br><span class="line">        nowPage = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> self.enable:</span><br><span class="line">            <span class="keyword">if</span> len(self.stories)&gt;<span class="number">0</span>:</span><br><span class="line">                <span class="comment">#从全局list中获取一页的段子</span></span><br><span class="line">                pageStories = self.stories[<span class="number">0</span>]</span><br><span class="line">                <span class="comment">#当前读到的页数加一</span></span><br><span class="line">                nowPage += <span class="number">1</span></span><br><span class="line">                <span class="comment">#将全局list中第一个元素删除，因为已经取出</span></span><br><span class="line">                <span class="keyword">del</span> self.stories[<span class="number">0</span>]</span><br><span class="line">                <span class="comment">#输出该页的段子</span></span><br><span class="line">                self.getOneStory(pageStories,nowPage)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">spider = QSBK()</span><br><span class="line">spider.start()</span><br></pre></td></tr></table></figure>
<p>抓取到热门网页中的段子的作者，发布时间，内容，点赞数，这些段子还是挺搞笑的！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>自学python有一个星期了，一直在看语法，很是乏味，于是想写个爬虫，参照<a href="http：//cuiqingcai.com">网上的例子</a>实现的第一个爬虫是抓取糗事百科里的段子。主要用到了<code>urllib2</code>模块。<br><br>]]>
    
    </summary>
    
      <category term="python" scheme="http://yangqinghua.com/tags/python/"/>
    
      <category term="爬虫" scheme="http://yangqinghua.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Python" scheme="http://yangqinghua.com/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python爬虫:正则表达式]]></title>
    <link href="http://yangqinghua.com/2015/07/26/Python%E7%88%AC%E8%99%AB%EF%BC%9A%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yangqinghua.com/2015/07/26/Python爬虫：正则表达式/</id>
    <published>2015-07-26T07:49:05.000Z</published>
    <updated>2015-07-26T05:03:38.000Z</updated>
    <content type="html"><![CDATA[<p>正则表达式是一种用来匹配字符串的强有力的武器。它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的。</p>
<h2 id="正则表达式的规则">正则表达式的规则</h2><p>正则表达式的<a href="http://www.jb51.net/tools/zhengze.html" target="_blank" rel="external">语法规则</a>和<a href="http://www.jb51.net/tools/regex.htm" target="_blank" rel="external">常用的正则式</a>网上有很多相关的资料，以后用到可以查看。下面是Python中正则表达式的一些匹配规则，图片资料来自CSDN<br><a id="more"></a><br><img src="/img/zhengze.png" alt="zhengze"></p>
<h3 id="正则表达式相关注解">正则表达式相关注解</h3><p>（1）数量词的贪婪模式与非贪婪模式<br><br> 正则表达式通常用于在文本中查找匹配的字符串。Python里数量词默认是贪婪的（在少数语言里也可能是默认非贪婪），总是尝试匹配尽可能多的字符；非贪婪的则相反，总是尝试匹配尽可能少的字符。例如：正则表达式”ab<em>”如果用于查找”abbbc”，将找到”abbb”。而如果使用非贪婪的数量词”ab</em>?”，将找到”a”。<br></p>
<p>注：我们一般使用非贪婪模式来提取。</p>
<p>（2）反斜杠问题<br><br>与大多数编程语言相同，正则表达式里使用”\”作为转义字符，这就可能造成反斜杠困扰。假如你需要匹配文本中的字符”\”，那么使用编程语言表示的正则表达式里将需要4个反斜杠”\\”：前两个和后两个分别用于在编程语言里转义成反斜杠，转换成两个反斜杠后再在正则表达式里转义成一个反斜杠。<br><br>Python里的原生字符串很好地解决了这个问题，这个例子中的正则表达式可以使用r”\”表示。同样，匹配一个数字的”\d”可以写成r”\d”。有了原生字符串，写出来的表达式也更直观。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>正则表达式是一种用来匹配字符串的强有力的武器。它的设计思想是用一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串，我们就认为它“匹配”了，否则，该字符串就是不合法的。</p>
<h2 id="正则表达式的规则">正则表达式的规则</h2><p>正则表达式的<a href="http://www.jb51.net/tools/zhengze.html">语法规则</a>和<a href="http://www.jb51.net/tools/regex.htm">常用的正则式</a>网上有很多相关的资料，以后用到可以查看。下面是Python中正则表达式的一些匹配规则，图片资料来自CSDN<br>]]>
    
    </summary>
    
      <category term="python" scheme="http://yangqinghua.com/tags/python/"/>
    
      <category term="正则表达式" scheme="http://yangqinghua.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="爬虫" scheme="http://yangqinghua.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Python" scheme="http://yangqinghua.com/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ubuntu搭建Java开发环境]]></title>
    <link href="http://yangqinghua.com/2015/07/22/%20Ubuntu%E6%90%AD%E5%BB%BAJava%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%20/"/>
    <id>http://yangqinghua.com/2015/07/22/ Ubuntu搭建Java开发环境 /</id>
    <published>2015-07-22T03:09:05.000Z</published>
    <updated>2015-07-22T03:41:54.000Z</updated>
    <content type="html"><![CDATA[<h2 id="安装JDK">安装JDK</h2><p>今天尝试在ubuntu14.04安装jdk-7u80-linux-x64.tar.gz，并配置环境变量。</p>
<h3 id="第一步_下载">第一步 下载</h3><p>我下载的是jdk-7u80-linux-x64.tar.gz，下载地址是：<br><a href="http://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase7-521261.html" target="_blank" rel="external">http://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase7-521261.html</a><br><a id="more"></a></p>
<h3 id="第二步_解压">第二步 解压</h3><p>下到你的下载目录<br><code>cd 下载</code><br>然后执行<br><code>sudo tar zxvf jdk-7u4-linux-i586.tar.gz</code><br>这是解压到当前目录，因为下一步需要配置java环境变量，最后不要出现中文目录，所以现在将解压好的jdk.1.7.0_80目录移到 /home/java目录<br><code>sudo mv jdk1.7.0_80 /home/java</code></p>
<h3 id="第三步_修改环境变量">第三步 修改环境变量</h3><p>开启root权限，执行<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">vim</span> ~/.bashrc</span><br></pre></td></tr></table></figure></p>
<p>添加：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/home/java/jdk1.<span class="number">7.0</span>_80  </span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre  </span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib  </span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></p>
<p>保存退出，输入以下命令使之立即生效。<br><code>source ~/.bashrc</code><br>把设置环境变量的命令写进scripts中，要用source 命令,当通过文件（命令列）设置环境变量时。</p>
<h3 id="第四步_检测">第四步 检测</h3><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~$ java -<span class="built_in">version</span>  </span><br><span class="line">java <span class="built_in">version</span> <span class="string">"1.7.0_80"</span></span><br><span class="line">Java<span class="params">(TM)</span> SE Runtime Environment <span class="params">(build <span class="number">1.7</span>.<span class="number">0</span>_80-b15)</span></span><br><span class="line">Java HotSpot<span class="params">(TM)</span> <span class="number">64</span>-Bit Server VM <span class="params">(build <span class="number">24.80</span>-b11, mixed mode)</span></span><br></pre></td></tr></table></figure>
<p>完成JDK的安装和配置</p>
<h2 id="安装eclipse">安装eclipse</h2><p>一样的步骤去<a href="http://www.eclipse.org/downloads/" target="_blank" rel="external">官网</a>下载解压<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">tsinghua@tsinghua-Lenovo-Product:~$ cd 下载/eclipse</span><br><span class="line">tsinghua@tsinghua-Lenovo-Product:~/下载/eclipse$ ls -<span class="number">1</span></span><br><span class="line">artifacts<span class="class">.xml</span></span><br><span class="line">configuration</span><br><span class="line">dropins</span><br><span class="line">eclipse</span><br><span class="line">eclipse<span class="class">.ini</span></span><br><span class="line">features</span><br><span class="line"><span class="attribute">icon</span><span class="class">.xpm</span></span><br><span class="line">p2</span><br><span class="line">plugins</span><br><span class="line">readme</span><br><span class="line">tsinghua@tsinghua-Lenovo-Product:~/下载/eclipse$ ./eclipse</span><br><span class="line">org<span class="class">.eclipse</span><span class="class">.m2e</span><span class="class">.logback</span><span class="class">.configuration</span>: The org<span class="class">.eclipse</span><span class="class">.m2e</span><span class="class">.logback</span><span class="class">.configuration</span> bundle was activated before the state location was initialized.  Will retry after the state location is initialized.</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="安装JDK">安装JDK</h2><p>今天尝试在ubuntu14.04安装jdk-7u80-linux-x64.tar.gz，并配置环境变量。</p>
<h3 id="第一步_下载">第一步 下载</h3><p>我下载的是jdk-7u80-linux-x64.tar.gz，下载地址是：<br><a href="http://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase7-521261.html">http://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase7-521261.html</a><br>]]>
    
    </summary>
    
      <category term="java" scheme="http://yangqinghua.com/tags/java/"/>
    
      <category term="linux基础" scheme="http://yangqinghua.com/tags/linux%E5%9F%BA%E7%A1%80/"/>
    
      <category term="Linux" scheme="http://yangqinghua.com/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo+github搭建个人博客——优化]]></title>
    <link href="http://yangqinghua.com/2015/07/20/Hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E2%80%94%E2%80%94%E4%BC%98%E5%8C%96/"/>
    <id>http://yangqinghua.com/2015/07/20/Hexo+github搭建个人博客——优化/</id>
    <published>2015-07-19T18:09:05.000Z</published>
    <updated>2015-07-19T19:01:16.000Z</updated>
    <content type="html"><![CDATA[<h2 id="配置主题">配置主题</h2><p>hexo有很多主题，可以根据个人喜好选择，这是主题列表链接：<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="external">https://github.com/hexojs/hexo/wiki/Themes</a><br>，本站使用的是<a href="https://github.com/wuchong/jacman.git themes/jacman" target="_blank" rel="external">jacman</a>。</p>
<h3 id="安装">安装</h3><p>在博客根目录下执行如下命令。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/wuchong</span><span class="regexp">/jacman.git themes/jacman</span></span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="启用">启用</h3><p>修改你的博客根目录下的_config.yml配置文件中的theme属性，将其设置为jacman。同时建议设置stylus属性中的compress值为true，会自动压缩 CSS 文件，hexo默认配置中不包含这一项，建议开启。如下。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">theme:</span> jacman</span><br><span class="line"><span class="string">stylus:</span></span><br><span class="line"><span class="label">  compress:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<h2 id="微博秀">微博秀</h2><p>在<a href="http://app.weibo.com/tool/weiboshow" target="_blank" rel="external">微博秀</a>设置和生成代码<br>在主题 /layout/_widget 中新建 weibo.ejs 文件，保存刚刚复制的代码<br>在主题配置文件添加<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">widgets:</span><br><span class="line"><span class="bullet">- </span>weibo</span><br></pre></td></tr></table></figure></p>
<h2 id="自定义_404_页面">自定义 404 页面</h2><p>在根目录下的source文件夹中添加404.html，html中的代码如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">title</span>&gt;</span>404|tsinghua<span class="tag">&lt;<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"http://www.qq.com/404/search_children.js"</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>建议使用公益404页面，这是是由腾讯公司员工志愿者自主发起的互联网公益活动。</p>
<h2 id="about界面">about界面</h2><p>在根目录下，执行以下命令<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> page <span class="string">"about"</span></span><br></pre></td></tr></table></figure></p>
<p>编辑 source/about/index.md：<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: about me</span><br><span class="line"><span class="header">date: 2015-07-18 15:49:05</span><br><span class="line">---</span></span><br></pre></td></tr></table></figure></p>
<p>在主题的配置文件里添加入口<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">menu</span>:</span><br><span class="line">  <span class="attribute">About</span>: /about</span><br></pre></td></tr></table></figure></p>
<h2 id="文章摘要">文章摘要</h2><p>在摘要文字后面插入<br><code>&lt;!--more--&gt;</code><br>可以在主题的配置文件中设置要显示的文字<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">excerpt_link</span>: <span class="string">阅读全文</span></span><br></pre></td></tr></table></figure></p>
<h2 id="评论_comments">评论 comments</h2><p>填写duoshuo_shortname<a href="http://duoshuo.com/" target="_blank" rel="external">多说</a>的用户名，启用多说评论系统。</p>
<h2 id="网站统计_Analytics">网站统计 Analytics</h2><p>baidu_tongji：百度统计功能。需要填写站点特征码sitecode，在<a href="http://tongji.baidu.com/web/welcome/login" target="_blank" rel="external">百度统计</a>注册并配置站点后，获取特征码。特征码可以在「网站中心」-&gt; 「代码获取」中查看，如下图所示的<br><img src="/img/baidutongji.png" alt="baidu"><br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">baidu_tongji</span>:</span><br><span class="line">  <span class="attribute">enable</span>: false</span><br><span class="line">  <span class="attribute">sitecode</span>: 填写图片所示的code</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="配置主题">配置主题</h2><p>hexo有很多主题，可以根据个人喜好选择，这是主题列表链接：<a href="https://github.com/hexojs/hexo/wiki/Themes">https://github.com/hexojs/hexo/wiki/Themes</a><br>，本站使用的是<a href="https://github.com/wuchong/jacman.git themes/jacman">jacman</a>。</p>
<h3 id="安装">安装</h3><p>在博客根目录下执行如下命令。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/wuchong</span><span class="regexp">/jacman.git themes/jacman</span></span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="blog" scheme="http://yangqinghua.com/tags/blog/"/>
    
      <category term="hexo" scheme="http://yangqinghua.com/tags/hexo/"/>
    
      <category term="Hexo" scheme="http://yangqinghua.com/categories/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo+github搭建个人博客——绑定域名]]></title>
    <link href="http://yangqinghua.com/2015/07/20/Hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E2%80%94%E2%80%94%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/"/>
    <id>http://yangqinghua.com/2015/07/20/Hexo+github搭建个人博客——绑定域名/</id>
    <published>2015-07-19T17:07:05.000Z</published>
    <updated>2015-07-19T17:42:03.000Z</updated>
    <content type="html"><![CDATA[<p>虽然username.gitcafe.io可以访问到个人博客，显然不够酷炫，于是在万网上买了个域名yangqinghua.com,这才是自己的。</p>
<h2 id="域名注册">域名注册</h2><p>域名可以在很多地方购买，我这里是在<a href="http://wanwang.aliyun.com/" target="_blank" rel="external">万网</a>上买的。怎么注册，这有一个<a href="http://jingyan.baidu.com/article/4853e1e513d0061908f7265b.html" target="_blank" rel="external">教程</a>,跟着一步一步走，很简单。<br><a id="more"></a></p>
<h2 id="域名绑定">域名绑定</h2><h3 id="1-添加CNAME文件">1.添加CNAME文件</h3><p>在github仓库根目录下创建一个名为CNAME的文件，里面内容就是你的域名。</p>
<p>如example.com，不需要加http，www这样的前缀。<br><img src="/img/github.png" alt="github"></p>
<h3 id="2-在万网解析">2.在万网解析</h3><p>首先通过ping 你在github上的主页（×××.github.io）来获取ip地址。其实github.io的IP一般是103.245.222.133。然后在万网的域名解析界面按如下设置，记录值填刚刚记录下的ip地址。<br><img src="/img/dns.jpg" alt="dns"><br>这里有两种域名绑定的方式：A类型。</p>
<h3 id="3-配置完了之后经过一段时间的等待就能通过域名访问在github上的博客啦。">3.配置完了之后经过一段时间的等待就能通过域名访问在github上的博客啦。</h3>]]></content>
    <summary type="html">
    <![CDATA[<p>虽然username.gitcafe.io可以访问到个人博客，显然不够酷炫，于是在万网上买了个域名yangqinghua.com,这才是自己的。</p>
<h2 id="域名注册">域名注册</h2><p>域名可以在很多地方购买，我这里是在<a href="http://wanwang.aliyun.com/">万网</a>上买的。怎么注册，这有一个<a href="http://jingyan.baidu.com/article/4853e1e513d0061908f7265b.html">教程</a>,跟着一步一步走，很简单。<br>]]>
    
    </summary>
    
      <category term="blog" scheme="http://yangqinghua.com/tags/blog/"/>
    
      <category term="hexo" scheme="http://yangqinghua.com/tags/hexo/"/>
    
      <category term="Hexo" scheme="http://yangqinghua.com/categories/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo+github搭建个人博客——使用]]></title>
    <link href="http://yangqinghua.com/2015/07/19/Hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E2%80%94%E2%80%94%E4%BD%BF%E7%94%A8/"/>
    <id>http://yangqinghua.com/2015/07/19/Hexo+github搭建个人博客——使用/</id>
    <published>2015-07-19T15:49:05.000Z</published>
    <updated>2015-07-19T17:05:59.000Z</updated>
    <content type="html"><![CDATA[<h2 id="目录结构">目录结构</h2><p>打开工作区文件加可以看到：</p>
<p></p><p><br>├── deploy       #需要部署的文件<br>├── node_modules  #Hexo插件<br>├── public        #生成的静态网页文件<br>├── scaffolds     #模板<br>├── source        #博客正文和其他源文件，404、favicon、CNAME 都应该放在这里<br>├── _drafts   #草稿<br>├──  _posts    #文章<br>├── themes        #主题<br>├── _config.yml   #全局配置文件<br>└── package.json<br></p><br><a id="more"></a><p></p>
<h2 id="全局配置__config-yml">全局配置 _config.yml</h2><p><code>配置文件的冒号“:”后面有空格,不然报错</code><br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># Hexo Configuration</span></span><br><span class="line"><span class="preprocessor">## Docs: http://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="preprocessor">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"><span class="preprocessor"># Site #站点信息</span></span><br><span class="line"><span class="label">title:</span> tsinghua <span class="preprocessor">#标题</span></span><br><span class="line"><span class="label">subtitle:</span> 梦想不是浮躁，而是沉淀 <span class="preprocessor">#副标题</span></span><br><span class="line"><span class="label">description:</span> 杨卿华 blog <span class="preprocessor">#站点描述，给搜索引擎看的</span></span><br><span class="line"><span class="label">author:</span> 杨卿华 <span class="preprocessor">#作者</span></span><br><span class="line"><span class="label">email:</span> qhyang.bit@gmail.com <span class="preprocessor">#电子邮箱</span></span><br><span class="line"><span class="label">language:</span> <span class="built_in">zh</span>-CN <span class="preprocessor">#语言</span></span><br><span class="line"><span class="preprocessor"># URL #链接格式</span></span><br><span class="line"><span class="label">url:</span> http://yangqinghua.com <span class="preprocessor">#网址</span></span><br><span class="line"><span class="label">root:</span> / <span class="preprocessor">#根目录</span></span><br><span class="line"><span class="label">permalink:</span> :year/:month/:day/:title/ <span class="preprocessor">#文章的链接格式</span></span><br><span class="line"><span class="label">tag_dir:</span> tags <span class="preprocessor">#标签目录</span></span><br><span class="line"><span class="label">archive_dir:</span> archives <span class="preprocessor">#存档目录</span></span><br><span class="line"><span class="label">category_dir:</span> categories <span class="preprocessor">#分类目录</span></span><br><span class="line"><span class="label">code_dir:</span> downloads/code</span><br><span class="line"><span class="label">permalink_defaults:</span></span><br><span class="line"><span class="preprocessor"># Directory #目录</span></span><br><span class="line"><span class="label">source_dir:</span> source <span class="preprocessor">#源文件目录</span></span><br><span class="line"><span class="label">public_dir:</span> public <span class="preprocessor">#生成的网页文件目录</span></span><br><span class="line"><span class="preprocessor"># Writing #写作</span></span><br><span class="line"><span class="label">new_post_name:</span> :title.md <span class="preprocessor">#新文章标题</span></span><br><span class="line"><span class="label">default_layout:</span> post <span class="preprocessor">#默认的模板，包括 post、page、photo、draft（文章、页面、照片、草稿）</span></span><br><span class="line"><span class="label">titlecase:</span> false <span class="preprocessor">#标题转换成大写</span></span><br><span class="line"><span class="label">external_link:</span> true <span class="preprocessor">#在新选项卡中打开连接</span></span><br><span class="line"><span class="label">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="label">render_drafts:</span> false</span><br><span class="line"><span class="label">post_asset_folder:</span> false</span><br><span class="line"><span class="label">relative_link:</span> false</span><br><span class="line"><span class="label">highlight:</span> <span class="preprocessor">#语法高亮</span></span><br><span class="line">  enable: true <span class="preprocessor">#是否启用</span></span><br><span class="line">  line_number: true <span class="preprocessor">#显示行号</span></span><br><span class="line">  tab_replace:</span><br><span class="line"><span class="preprocessor"># Category &amp; Tag #分类和标签</span></span><br><span class="line"><span class="label">default_category:</span> uncategorized <span class="preprocessor">#默认分类</span></span><br><span class="line"><span class="label">category_map:</span></span><br><span class="line"><span class="label">tag_map:</span></span><br><span class="line"><span class="preprocessor"># Archives</span></span><br><span class="line"><span class="number">2</span>: 开启分页</span><br><span class="line"><span class="number">1</span>: 禁用分页</span><br><span class="line"><span class="number">0</span>: 全部禁用</span><br><span class="line"><span class="label">archive:</span> <span class="number">2</span></span><br><span class="line"><span class="label">category:</span> <span class="number">2</span></span><br><span class="line"><span class="label">tag:</span> <span class="number">2</span></span><br><span class="line"><span class="preprocessor"># Server #本地服务器</span></span><br><span class="line"><span class="label">port:</span> <span class="number">4000</span> <span class="preprocessor">#端口号</span></span><br><span class="line"><span class="label">server_ip:</span> localhost <span class="preprocessor">#IP 地址</span></span><br><span class="line"><span class="label">logger:</span> false</span><br><span class="line"><span class="label">logger_format:</span> dev</span><br><span class="line"><span class="preprocessor"># Date / Time format #日期时间格式</span></span><br><span class="line"><span class="label">date_format:</span> YYYY-MM-DD <span class="preprocessor">#参考http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="label">time_format:</span> H:mm:ss</span><br><span class="line"><span class="preprocessor"># Pagination #分页</span></span><br><span class="line"><span class="label">per_page:</span> <span class="number">10</span> <span class="preprocessor">#每页文章数，设置成 0 禁用分页</span></span><br><span class="line"><span class="label">pagination_dir:</span> page</span><br><span class="line"><span class="preprocessor"># Disqus #Disqus评论，替换为多说</span></span><br><span class="line"><span class="label">disqus_shortname:</span></span><br><span class="line"><span class="preprocessor"># Extensions #拓展插件</span></span><br><span class="line"><span class="label">theme:</span> jacman <span class="preprocessor">#主题</span></span><br><span class="line"><span class="label">exclude_generator:</span></span><br><span class="line"><span class="label">plugins:</span> <span class="preprocessor">#插件，例如生成 RSS 和站点地图的</span></span><br><span class="line">- hexo-generator-feed</span><br><span class="line">- hexo-generator-sitemap</span><br><span class="line"><span class="preprocessor"># Deployment #部署，改成用户名</span></span><br><span class="line"><span class="label">deploy:</span></span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:username/username.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p>
<h2 id="常用命令使用">常用命令使用</h2><p>常用命令<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo help <span class="preprocessor">#查看帮助</span></span><br><span class="line">hexo init <span class="preprocessor">#初始化一个目录</span></span><br><span class="line">hexo <span class="keyword">new</span> <span class="string">"postName"</span> <span class="preprocessor">#新建文章</span></span><br><span class="line">hexo <span class="keyword">new</span> page <span class="string">"pageName"</span> <span class="preprocessor">#新建页面</span></span><br><span class="line">hexo generate <span class="preprocessor">#生成网页，可以在 public 目录查看整个网站的文件</span></span><br><span class="line">hexo <span class="keyword">server</span> <span class="preprocessor">#本地预览，'Ctrl+C'关闭</span></span><br><span class="line">hexo deploy <span class="preprocessor">#部署.deploy目录</span></span><br><span class="line">hexo clean <span class="preprocessor">#清除缓存，强烈建议每次执行命令前先清理缓存，每次部署前先删除 .deploy 文件夹</span></span><br></pre></td></tr></table></figure></p>
<p>简写<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="variable">n =</span>= hexo new</span><br><span class="line">hexo <span class="variable">g =</span>= hexo generate</span><br><span class="line">hexo <span class="variable">s =</span>= hexo server</span><br><span class="line">hexo <span class="variable">d =</span>= hexo deploy</span><br></pre></td></tr></table></figure></p>
<h2 id="编辑文章">编辑文章</h2><p>新建文章，在根目录下<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="string">"标题"</span></span><br></pre></td></tr></table></figure></p>
<p>在 _posts 目录下会生成文件<code>标题.md</code><br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">title: 标题</span><br><span class="line">date: 2014-11-11 11:11:11</span><br><span class="line">tags:</span><br><span class="line">-<span class="ruby"> 标签<span class="number">1</span></span><br><span class="line"></span>-<span class="ruby"> 标签<span class="number">2</span></span><br><span class="line"></span>-<span class="ruby"> 标签<span class="number">3</span></span><br><span class="line"></span>categories: [分类1,分类2,分类3]</span><br><span class="line">-<span class="ruby">--</span><br><span class="line"></span>正文</span><br></pre></td></tr></table></figure></p>
<p>使用Markdown语法书写,这里有<a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="external">在线编辑器</a>,还有<a href="http://wowubuntu.com/markdown/#precode" target="_blank" rel="external">Markdown语法</a>,熟悉一些。编辑完后保存，预览<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">server</span></span><br></pre></td></tr></table></figure></p>
<h2 id="发布">发布</h2><p>以发布到 Github 为例<br>编辑全局配置文件 _config.yml 中的 deploy 部分。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repository</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:username/username.github.io.git</span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure></p>
<p>部署<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">g</span></span><br><span class="line">hexo <span class="literal">d</span></span><br></pre></td></tr></table></figure></p>
<p>以下提示说明部署成功<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr_selector">[info]</span> <span class="tag">Deploy</span> <span class="rule"><span class="attribute">done</span>:<span class="value"> github</span></span></span><br></pre></td></tr></table></figure></p>
<p>访问路径：http：//username.github.io</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="目录结构">目录结构</h2><p>打开工作区文件加可以看到：</p>
<p><p><br>├── deploy       #需要部署的文件<br>├── node_modules  #Hexo插件<br>├── public        #生成的静态网页文件<br>├── scaffolds     #模板<br>├── source        #博客正文和其他源文件，404、favicon、CNAME 都应该放在这里<br>├── _drafts   #草稿<br>├──  _posts    #文章<br>├── themes        #主题<br>├── _config.yml   #全局配置文件<br>└── package.json<br></p><br>]]>
    
    </summary>
    
      <category term="blog" scheme="http://yangqinghua.com/tags/blog/"/>
    
      <category term="hexo" scheme="http://yangqinghua.com/tags/hexo/"/>
    
      <category term="Hexo" scheme="http://yangqinghua.com/categories/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo+github搭建个人博客——安装]]></title>
    <link href="http://yangqinghua.com/2015/07/19/Hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85/"/>
    <id>http://yangqinghua.com/2015/07/19/Hexo+github搭建个人博客——安装/</id>
    <published>2015-07-19T07:49:05.000Z</published>
    <updated>2015-07-19T16:00:37.000Z</updated>
    <content type="html"><![CDATA[<p>hexo是由Node.js驱动的一款快速、简单且功能强大的博客框架。<br><img src="/img/hexo.png" alt="hexo"><br>特性</p>
<blockquote>
<p>风一般的速度</p>
</blockquote>
<p>  Hexo基于Node.js，支持多进程，几百篇文章也可以秒生成。</p>
<blockquote>
<p>流畅的撰写</p>
</blockquote>
<p>  支持GitHub Flavored Markdown和所有Octopress的插件。</p>
<blockquote>
<p>扩展性</p>
</blockquote>
<p>  Hexo支持EJS、Swig和Stylus。通过插件支持Haml、Jade和Less.</p>
<a id="more"></a>
<h2 id="Node-js">Node.js</h2><p>前提是必须先安装 Node.js和 npm，这篇<a href="http://blog.fens.me/nodejs-enviroment/" target="_blank" rel="external">文章</a>可以看一下<br><code><br>$sudo apt-get install nodejs<br>$sudo apt-get install npm<br></code><br>仅需一步就安装完毕，很简单吧？<br></p>
<h2 id="Hexo">Hexo</h2><p>安装</p>
<pre><code>
npm install -g hexo
</code></pre>
查看 Node 版本
<pre><code>
node -v
</code></pre>
查看 Hexo 版本,检查是否安装正确
<pre><code>
hexo version
</code></pre>
先进目录再初始化项目
<pre><code>
cd hexo（你的工作区名）
hexo init
</code></pre>
进入目录
<pre><code>
cd hexo-lcx
</code></pre>
安装依赖包
<pre><code>
npm install
</code></pre>

<p>以后所有的命令都在该目录下进行<br>启动服务</p>
<p><pre><code><br>hexo server<br></code></pre><br>用浏览器打开 <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> 或者 <a href="http://0.0.0.1:4000/" target="_blank" rel="external">http://0.0.0.1:4000/</a> 就能看到网页了<br>按Ctrl+C停止本地预览服务</p>
<h2 id="Git">Git</h2><p>安装Git的客户端</p>
<p><pre><code><br>$ sudo apt-get install git-core<br></code></pre></p>
<h2 id="Github">Github</h2><ol>
<li>先注册一个『GitHub』帐号，已有的默认默认请忽略</li>
<li>建立与你用户名对应的仓库，仓库名必须为『your_user_name.github.io』</li>
<li>添加SSH公钥到『Account settings -&gt; SSH Keys -&gt; Add SSH Key』<br>详细的可以看一些这篇<a href="http://www.aips.me/github-pages-build-blog.html" target="_blank" rel="external">文章</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>hexo是由Node.js驱动的一款快速、简单且功能强大的博客框架。<br><img src="/img/hexo.png" alt="hexo"><br>特性</p>
<blockquote>
<p>风一般的速度</p>
</blockquote>
<p>  Hexo基于Node.js，支持多进程，几百篇文章也可以秒生成。</p>
<blockquote>
<p>流畅的撰写</p>
</blockquote>
<p>  支持GitHub Flavored Markdown和所有Octopress的插件。</p>
<blockquote>
<p>扩展性</p>
</blockquote>
<p>  Hexo支持EJS、Swig和Stylus。通过插件支持Haml、Jade和Less.</p>]]>
    
    </summary>
    
      <category term="blog" scheme="http://yangqinghua.com/tags/blog/"/>
    
      <category term="hexo" scheme="http://yangqinghua.com/tags/hexo/"/>
    
      <category term="Hexo" scheme="http://yangqinghua.com/categories/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[搭建独立博客]]></title>
    <link href="http://yangqinghua.com/2015/07/18/%E6%90%AD%E5%BB%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yangqinghua.com/2015/07/18/搭建独立博客/</id>
    <published>2015-07-18T07:49:05.000Z</published>
    <updated>2015-07-19T07:54:48.000Z</updated>
    <content type="html"><![CDATA[<p>历时三天，第一次在万网申请域名，第一次使用<a href="http://www.github.com" target="_blank" rel="external">github</a>来管理源码，第一次独立安装ubuntu，在一点点的摸索中，各种菜鸟问题层出不穷。。。但是，在baidu大神的庇护在，经过千难万险，我的个人独立博客终于建立起来了！</p>
<p>初来乍到<a href="http://www.bit.edu.cn" target="_blank" rel="external">bit</a>，很幸运的进入了一个很有优秀的团队，见识到了真正的大神。同时产生了无形的压力，自己实在是太弱了，好在实验室的学长们都很有耐心，每次问一些很low的问题，都能细致的帮我解答。</p>
<a id="more"></a>
<h2 id="为什么要一个独立博客">为什么要一个独立博客</h2><p>刚来到实验室，在多人的推荐下，我第一次看到了<a href="http://wuchong.me" target="_blank" rel="external">wuchong</a>学长的博客，真是太酷炫的！里面高大上的技术分享真是把我震撼到了，于是萌生了自己做一个独立博客的想法。<br>之所以要一个独立博客，我觉得有以下几个原因在驱动我吧。<br>     <strong>1.独立，自由，简洁。</strong><br>     <strong>2.够酷炫。能有一个专属自己的域名。</strong><br>     <strong>3.成长的记录。记录下在学习过程中遇到的问题和其解决方案，方便今后查看。</strong></p>
<h2 id="对博客未来的打算">对博客未来的打算</h2><p>艰苦奋战建好博客后，真的很有成就感，以后我也可以写一个菜鸟建站教程了。也可以以此为动力，驱动自己可以去学习一些技术，希望能坚持。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>历时三天，第一次在万网申请域名，第一次使用<a href="http://www.github.com">github</a>来管理源码，第一次独立安装ubuntu，在一点点的摸索中，各种菜鸟问题层出不穷。。。但是，在baidu大神的庇护在，经过千难万险，我的个人独立博客终于建立起来了！</p>
<p>初来乍到<a href="http://www.bit.edu.cn">bit</a>，很幸运的进入了一个很有优秀的团队，见识到了真正的大神。同时产生了无形的压力，自己实在是太弱了，好在实验室的学长们都很有耐心，每次问一些很low的问题，都能细致的帮我解答。</p>]]>
    
    </summary>
    
      <category term="生活" scheme="http://yangqinghua.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="随笔生活" scheme="http://yangqinghua.com/categories/%E9%9A%8F%E7%AC%94%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>